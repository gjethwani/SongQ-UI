[{"/Users/gautamjethwani/Documents/songq-ui/src/reportWebVitals.js":"1","/Users/gautamjethwani/Documents/songq-ui/src/App.js":"2","/Users/gautamjethwani/Documents/songq-ui/src/index.js":"3","/Users/gautamjethwani/Documents/songq-ui/src/Login/index.js":"4","/Users/gautamjethwani/Documents/songq-ui/src/Login/Login.js":"5","/Users/gautamjethwani/Documents/songq-ui/src/Home/index.js":"6","/Users/gautamjethwani/Documents/songq-ui/src/Home/Home.js":"7","/Users/gautamjethwani/Documents/songq-ui/src/GuestHome/index.js":"8","/Users/gautamjethwani/Documents/songq-ui/src/GuestHome/GuestHome.js":"9","/Users/gautamjethwani/Documents/songq-ui/src/util.js":"10","/Users/gautamjethwani/Documents/songq-ui/src/FooterComponent/index.js":"11","/Users/gautamjethwani/Documents/songq-ui/src/FooterComponent/FooterComponent.js":"12","/Users/gautamjethwani/Documents/songq-ui/src/Tour/index.js":"13","/Users/gautamjethwani/Documents/songq-ui/src/Tour/Tour.js":"14"},{"size":362,"mtime":1609565627382,"results":"15","hashOfConfig":"16"},{"size":1225,"mtime":1610862734591,"results":"17","hashOfConfig":"16"},{"size":500,"mtime":1610357481641,"results":"18","hashOfConfig":"16"},{"size":48,"mtime":1609566008982,"results":"19","hashOfConfig":"16"},{"size":1280,"mtime":1611638345961,"results":"20","hashOfConfig":"16"},{"size":45,"mtime":1609568096052,"results":"21","hashOfConfig":"16"},{"size":24800,"mtime":1611704359465,"results":"22","hashOfConfig":"16"},{"size":60,"mtime":1609615551780,"results":"23","hashOfConfig":"16"},{"size":9262,"mtime":1611699641246,"results":"24","hashOfConfig":"16"},{"size":724,"mtime":1611647288657,"results":"25","hashOfConfig":"16"},{"size":78,"mtime":1610357099679,"results":"26","hashOfConfig":"16"},{"size":988,"mtime":1610510534159,"results":"27","hashOfConfig":"16"},{"size":45,"mtime":1611642423313,"results":"28","hashOfConfig":"16"},{"size":3644,"mtime":1611702078380,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"3t1696",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"32"},"/Users/gautamjethwani/Documents/songq-ui/src/reportWebVitals.js",[],["62","63"],"/Users/gautamjethwani/Documents/songq-ui/src/App.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/index.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/Login/index.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/Login/Login.js",["64"],"import { \n    loginContainer,\n    flexContainer,\n    welcome,\n    logo\n} from './Login.module.css'\nimport { useEffect } from 'react'\nimport { Button, notification } from 'antd'\nimport { getURL, logoUrl } from '../util'\nimport 'antd/dist/antd.css'\n\nconst Login = () => {\n    const getQuery = () => {\n        return new URLSearchParams(window.location.search)\n    }\n    useEffect(() => {\n        document.title = 'Welcome to SongQ!'\n        const query = getQuery()\n        const err = query.get('err')\n        if (err === 'nopremium') {\n            notification['error']({\n                message: 'Cannot Login',\n                description: 'You need Spotify Premium to use SongQ'\n            })\n        }\n    })\n    const login = () => {\n        window.location.href = `${getURL()}/spotify-login`\n    }\n    return (\n        <div className={loginContainer}>\n            <div className={flexContainer}>\n                {/* <h1 className={welcome}>Welcome to SongQ</h1> */}\n                <img src={logoUrl} className={logo} />\n                <Button ghost shape=\"round\" onClick={login}>Sign in with Spotify</Button>\n                <p className={welcome}>Sign in with your Spotify account to access your queue</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Login\n","/Users/gautamjethwani/Documents/songq-ui/src/Home/index.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/Home/Home.js",["65","66","67","68"],"/Users/gautamjethwani/Documents/songq-ui/src/GuestHome/index.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/GuestHome/GuestHome.js",["69","70"],"import { \n    PageHeader, \n    Button, \n    notification, \n    List, \n    Table,\n    Spin\n} from 'antd'\nimport Input from 'muicss/lib/react/input'\nimport { \n    header, \n    cardExtras, \n    searchBox, \n    inactive \n} from './GuestHome.module.css'\nimport { albumArt, requestsTable, welcomeContainer, logo } from '../Home/Home.module.css'\nimport { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport axios from 'axios'\nimport { CheckCircleTwoTone, PlusOutlined, LoadingOutlined } from '@ant-design/icons'\nimport { getURL, logoUrl, featureFlags } from '../util'\nimport { isMobile } from 'react-device-detect'\nimport 'antd/dist/antd.css'\nimport 'muicss/dist/css/mui.min.css'\n\nconst joinArtists = artistsRaw => {\n    let result = ''\n    for (let i = 0; i < artistsRaw.length; i++) {\n        result += artistsRaw[i].name\n        if (i < artistsRaw.length - 1) {\n            result += ', '\n        }\n    }\n    return result\n}\n\nconst GuestHome = () => {\n    const [tracks, setTracks] = useState([])\n    const [userName, setUserName]  = useState('')\n    const [queueActivated, setQueueActivated] = useState(false)\n    const [requested, setRequested] = useState([])\n    const [recentRequests, setRecentRequests] = useState([])\n    const [currQuery, setQuery] = useState('')\n    const [pageLoading, setPageLoading] = useState(true)\n    const [requestsLoading, setRequestsLoading] = useState([])\n    const { userId } = useParams()\n    const { queueActiveButtonFeatureEnabled } = featureFlags\n    const albumArtIndex = 0\n    let CancelToken = axios.CancelToken\n    let cancel\n    useEffect(() => {\n        document.title = 'Welcome to SongQ!'\n        axios.post(`${getURL()}/guest-login`, {}, { withCredentials: true })\n            .then(() => {\n                if (queueActiveButtonFeatureEnabled) {\n                    axios.post(`${getURL()}/is-queue-active`, { userId  }, { withCredentials: true })\n                    .then(response => {\n                        const { queueActivated } = response.data\n                        setQueueActivated(queueActivated)\n                    })\n                    .catch(err => {\n                        notification['error']({\n                            message: 'Server Error',\n                            description: 'Cannot connect to server'\n                        })\n                        console.log(err)\n                    })\n                }\n                axios.get(`${getURL()}/get-user-name?userId=${userId}`, { withCredentials: true })\n                    .then(response => {\n                        const { name } = response.data\n                        if (name) {\n                            setUserName(name)\n                        }\n                    })\n                    .catch(err => {\n                        console.log(err)\n                    })\n                axios.get(`${getURL()}/get-recently-approved?userId=${userId}`, { withCredentials: true })\n                    .then(response => {\n                        const { requests } = response.data\n                        setRecentRequests(requests)\n                    })\n                    .catch(err => {\n                        console.log(err)\n                    })\n            })\n            .catch(err => {\n                notification['error']({\n                    message: 'Server Error',\n                    description: 'Cannot connect to Spotify'\n                })\n                console.log(err)\n            })\n            .finally(() => {\n                setPageLoading(false)\n            })\n        \n    }, [])\n    const onSearchChanged = query => {\n        setQuery(query)\n        if (query === '') {\n            return\n        }\n        if (cancel !== undefined) {\n            cancel()\n        }\n        setPageLoading(true)\n        axios.post(`${getURL()}/search-songs`, { q: query}, { \n            withCredentials: true,\n            cancelToken: new CancelToken(c => {\n                cancel = c\n            })\n        })\n            .then(response => {\n                const { items } = response.data.results.tracks\n                setTracks(items)\n            })\n            .catch(err => {\n                console.log(err)\n            })\n            .finally(() => {\n                setPageLoading(false)\n            })\n    }\n    const makeRequest = track => {\n        requestsLoading.push(track.id)\n        setRequestsLoading([...requestsLoading])\n        axios.post(`${getURL()}/make-request`, {\n            userId,\n            songId: track.id,\n            songName: track.songName,\n            artists: track.artists,\n            album: track.album,\n            albumArt: track.albumArt\n        }, {\n            withCredentials: true\n        })\n        .then(() => {\n            requested.push(track.id)\n            setRequested([...requested])\n        })\n        .catch(err => {\n            notification['error']({\n                message: 'Could not make request',\n                description: 'Error making request'\n            })\n            console.log(err)\n        })\n        .finally(() => {\n            requestsLoading.splice(track.id, 1)\n            setRequestsLoading([...requestsLoading])\n        })\n    }\n    const generateData = () => {\n        const toReturn = []\n        if (currQuery === '') {\n            for (let i = 0; i < recentRequests.length; i++) {\n                const r = recentRequests[i]\n                toReturn.push({\n                    key: `${i}`,\n                    track: {\n                        songName: r.songName,\n                        albumArt: r.albumArt,\n                        artists: r.artists\n                    }\n                })\n            }\n        } else {\n            for (let i = 0; i < tracks.length; i++) {\n                const t = tracks[i]\n                const songInfo = {\n                    songName: t.name,\n                    albumArt: t.album.images[albumArtIndex].url,\n                    artists: joinArtists(t.artists)\n                }\n                songInfo.id = t.id\n                toReturn.push({\n                    key: `${i}`,\n                    track: songInfo,\n                    request: {\n                        id: t.id,\n                        album: t.album.name,\n                        ...songInfo\n                    }\n                })\n            }\n        }\n        return toReturn\n    }\n    const columns = [\n        {\n            title: 'Track',\n            dataIndex: 'track',\n            key: 'track',\n            width: '70%',\n            render: track => (\n                <List.Item>\n                    <List.Item.Meta \n                        avatar={\n                            <img \n                                alt='album art' \n                                src={track.albumArt} \n                                className={albumArt}\n                        />}\n                        title={track.songName}\n                        description={track.artists}\n                    />\n                </List.Item>\n            ),\n        }\n    ]\n    if (currQuery !== '') {\n        columns.push({\n            title: 'Request',\n            dataIndex: 'request',\n            key: 'request',\n            width: '30%',\n            render: track => (\n                <Button \n                    className={cardExtras} \n                    style={{ marginBottom: '1rem', marginTop: '1rem', border: 'none'}} \n                    onClick={() => makeRequest(track)}\n                    disabled={requested.includes(track.id)}\n                    loading={requestsLoading.includes(track.id)}\n                >\n                    {requestsLoading.includes(track.id) ? '' : (requested.includes(track.id) ? <CheckCircleTwoTone className={cardExtras} twoToneColor=\"#52c41a\"/> : <PlusOutlined />)}\n                </Button>\n            )\n        })\n    }\n    return (\n        <div>\n            <PageHeader \n                title={\n                <div className={welcomeContainer}>\n                    <img className={logo} src={logoUrl} style={isMobile ? { width: '40%'} : {}}/>\n                    <span>{userName !== '' ? `${userName}'s queue` : `Welcome to the queue!`}</span>\n                </div>}\n                className={header}\n            />\n            <Spin spinning={pageLoading} indicator={<LoadingOutlined spin />}>\n                {!queueActivated && queueActiveButtonFeatureEnabled && <h3 className={inactive}>Queue is not active</h3>}\n                {(queueActivated || !queueActiveButtonFeatureEnabled) && \n                    <div>\n                        <Input\n                            label='Search for songs'\n                            onChange={e => onSearchChanged(e.target.value)}\n                            className={searchBox}\n                            floatingLabel\n                        />\n                        <h2 style={{ textAlign: 'center', fontVariant: 'tabular-nums', fontWeight: 'bold'}}>\n                            {currQuery === '' ? 'Recently Played' : 'Search Results'}\n                        </h2>\n                        <Table columns={columns} dataSource={generateData()} className={requestsTable} />\n                    </div>}\n            </Spin>\n        </div>\n    )\n}\n\n\n\nexport default GuestHome","/Users/gautamjethwani/Documents/songq-ui/src/util.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/FooterComponent/index.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/FooterComponent/FooterComponent.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/Tour/index.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/Tour/Tour.js",["71","72","73"],"import { Modal, Steps, Button } from 'antd'\nimport { currUrl } from '../util'\nimport { copyLink, requestsImg, modal, tourInstructions } from './Tour.module.css'\nimport { useState, useEffect } from 'react'\nimport { useCookies } from 'react-cookie'\n\nconst { Step } = Steps\n\nconst steps = [\n    {\n        index: 0,\n        title: 'Queue Link',\n        content: <div className={tourInstructions}>\n            <p>You can use the 'Copy Link' button to get a shareable link where people will be able to request tracks for your queue</p>\n            <Button onClick={e => e.preventDefault()} className={copyLink} shape='round'>Copy Link</Button>\n        </div>\n    },\n    {\n        index: 1,\n        title: 'Requests',\n        content: <div className={tourInstructions}>\n            <p>Your requests will show up here, where you can see the details about the request andhow many votes it has.</p>\n            <p>You can use the green and red buttons to approve or reject the track. On approval, the track will be added to your Spotify queue.</p>\n            <img className={requestsImg} src={`${currUrl}/requests.png`} />\n        </div>\n    },\n    {\n        index: 2,\n        title: 'Extra Actions',\n        content: <div className={tourInstructions}>\n            <p>You can perform other actions located in the menu</p>\n            <p>Enable auto accept to automatically approve any request that comes in</p>\n            <p>Use the 'Approve All' and 'Reject All' buttons to service all of your current requests</p>\n            <img src={`${currUrl}/extras-menu.png`}/>\n        </div>\n    }\n]\n\nconst Tour = props => {\n    const [cookies, setCookie] = useCookies()\n    const [currStep, setCurrStep] = useState(0)\n    const [modalVisible, setModalVisible] = useState(false)\n    const { tourShown } = cookies\n    useEffect(() => {\n        if (!tourShown) {\n            setModalVisible(true)\n        }\n        if (props.showTourClicked) {\n            props.setShowTourClicked(false)\n            setModalVisible(true)\n        }\n    })\n    const nextStep = () => {\n        if (currStep === steps.length-1) {\n            setCookie('tourShown', true)\n            setModalVisible(false)\n        } else {\n            setCurrStep(currStep + 1)\n        }\n    }\n    const previousStep = () => {\n        if (currStep > 0) {\n            setCurrStep(currStep - 1)\n        }\n    }\n    const onModalCancel = () => {\n        setModalVisible(false)\n        setCookie('tourShown', true)\n    }\n    const getFooter = () => {\n        const footer = [\n            <Button key={1} onClick={() => setModalVisible(false)}>Skip Tour</Button>, \n            <Button key={3} type='primary' onClick={() => nextStep()}>{currStep === steps.length-1 ? 'Finish' : 'Next'}</Button>\n        ]\n        if (currStep > 0) {\n            footer.push(<Button key={2} onClick={() => previousStep()}>Previous</Button>)\n        }\n        footer.sort((f1, f2) => {\n            return f1.key - f2.key\n        })\n        return footer\n    }\n    return (\n        <Modal \n            title='Intro to SongQ' \n            visible={modalVisible} \n            footer={getFooter()}\n            className={modal}\n            onCancel={() => onModalCancel()}\n        >\n            <Steps current={currStep} status='wait'>\n                {steps.map(item =>{\n                    return <Step status={currStep === item.index ? 'process' : (currStep > item.index ? 'finish' : 'wait')} key={item.title} title={item.title} />\n                })}\n            </Steps>\n            <div className='steps-content'>\n                {steps[currStep].content}\n            </div>\n        </Modal>\n    )\n}\n\nexport default Tour",{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":34,"column":17,"nodeType":"80","endLine":34,"endColumn":55},{"ruleId":"81","severity":1,"message":"82","line":120,"column":8,"nodeType":"83","endLine":120,"endColumn":24,"suggestions":"84"},{"ruleId":"81","severity":1,"message":"85","line":133,"column":9,"nodeType":"83","endLine":133,"endColumn":36,"suggestions":"86"},{"ruleId":"81","severity":1,"message":"87","line":137,"column":8,"nodeType":"83","endLine":137,"endColumn":17,"suggestions":"88"},{"ruleId":"78","severity":1,"message":"79","line":572,"column":25,"nodeType":"80","endLine":572,"endColumn":102},{"ruleId":"81","severity":1,"message":"89","line":99,"column":8,"nodeType":"83","endLine":99,"endColumn":10,"suggestions":"90"},{"ruleId":"78","severity":1,"message":"79","line":237,"column":21,"nodeType":"80","endLine":237,"endColumn":98},{"ruleId":"78","severity":1,"message":"79","line":24,"column":13,"nodeType":"80","endLine":24,"endColumn":76},{"ruleId":"78","severity":1,"message":"79","line":34,"column":13,"nodeType":"80","endLine":34,"endColumn":54},{"ruleId":"81","severity":1,"message":"91","line":44,"column":5,"nodeType":"92","endLine":44,"endColumn":14,"suggestions":"93"},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'cookies'. Either include it or remove the dependency array.","ArrayExpression",["96"],"React Hook useEffect has a missing dependency: 'menuVisible'. Either include it or remove the dependency array.",["97"],"React Hook useEffect has a missing dependency: 'sortBy'. Either include it or remove the dependency array.",["98"],"React Hook useEffect has missing dependencies: 'queueActiveButtonFeatureEnabled' and 'userId'. Either include them or remove the dependency array.",["99"],"React Hook useEffect contains a call to 'setModalVisible'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [tourShown, props] as a second argument to the useEffect Hook.","Identifier",["100"],"no-global-assign","no-unsafe-negation",{"desc":"101","fix":"102"},{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},{"desc":"107","fix":"108"},{"desc":"109","fix":"110"},"Update the dependencies array to be: [cookies, queueActivated]",{"range":"111","text":"112"},"Update the dependencies array to be: [currTourStep, menuVisible, tourVisible]",{"range":"113","text":"114"},"Update the dependencies array to be: [sortBy, sortKey]",{"range":"115","text":"116"},"Update the dependencies array to be: [queueActiveButtonFeatureEnabled, userId]",{"range":"117","text":"118"},"Add dependencies array: [tourShown, props]",{"range":"119","text":"120"},[3922,3938],"[cookies, queueActivated]",[4297,4324],"[currTourStep, menuVisible, tourVisible]",[4417,4426],"[sortBy, sortKey]",[3587,3589],"[queueActiveButtonFeatureEnabled, userId]",[2020,2020],", [tourShown, props]"]