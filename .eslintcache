[{"/Users/gautamjethwani/Documents/songq-ui/src/reportWebVitals.js":"1","/Users/gautamjethwani/Documents/songq-ui/src/App.js":"2","/Users/gautamjethwani/Documents/songq-ui/src/index.js":"3","/Users/gautamjethwani/Documents/songq-ui/src/Login/index.js":"4","/Users/gautamjethwani/Documents/songq-ui/src/Login/Login.js":"5","/Users/gautamjethwani/Documents/songq-ui/src/Home/index.js":"6","/Users/gautamjethwani/Documents/songq-ui/src/Home/Home.js":"7","/Users/gautamjethwani/Documents/songq-ui/src/GuestHome/index.js":"8","/Users/gautamjethwani/Documents/songq-ui/src/GuestHome/GuestHome.js":"9","/Users/gautamjethwani/Documents/songq-ui/src/util.js":"10","/Users/gautamjethwani/Documents/songq-ui/src/FooterComponent/index.js":"11","/Users/gautamjethwani/Documents/songq-ui/src/FooterComponent/FooterComponent.js":"12"},{"size":362,"mtime":1609565627382,"results":"13","hashOfConfig":"14"},{"size":1225,"mtime":1610862734591,"results":"15","hashOfConfig":"14"},{"size":500,"mtime":1610357481641,"results":"16","hashOfConfig":"14"},{"size":48,"mtime":1609566008982,"results":"17","hashOfConfig":"14"},{"size":896,"mtime":1611549690953,"results":"18","hashOfConfig":"14"},{"size":45,"mtime":1609568096052,"results":"19","hashOfConfig":"14"},{"size":19985,"mtime":1611549444116,"results":"20","hashOfConfig":"14"},{"size":60,"mtime":1609615551780,"results":"21","hashOfConfig":"14"},{"size":8289,"mtime":1611550118063,"results":"22","hashOfConfig":"14"},{"size":604,"mtime":1611550044506,"results":"23","hashOfConfig":"14"},{"size":78,"mtime":1610357099679,"results":"24","hashOfConfig":"14"},{"size":988,"mtime":1610510534159,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"3t1696",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/gautamjethwani/Documents/songq-ui/src/reportWebVitals.js",[],["53","54"],"/Users/gautamjethwani/Documents/songq-ui/src/App.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/index.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/Login/index.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/Login/Login.js",["55"],"import { \n    loginContainer,\n    flexContainer,\n    welcome,\n    logo\n} from './Login.module.css'\nimport { useEffect } from 'react'\nimport { Button } from 'antd'\nimport { getURL, logoUrl } from '../util'\nimport 'antd/dist/antd.css'\n\nconst Login = () => {\n    useEffect(() => {\n        document.title = 'Welcome to SongQ!'\n    })\n    const login = () => {\n        window.location.href = `${getURL()}/spotify-login`\n    }\n    return (\n        <div className={loginContainer}>\n            <div className={flexContainer}>\n                {/* <h1 className={welcome}>Welcome to SongQ</h1> */}\n                <img src={logoUrl} className={logo} />\n                <Button ghost shape=\"round\" onClick={login}>Sign in with Spotify</Button>\n                <p className={welcome}>Sign in with your Spotify account to access your queue</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Login\n","/Users/gautamjethwani/Documents/songq-ui/src/Home/index.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/Home/Home.js",["56","57"],"import { useEffect } from 'react'\nimport {\n    header,\n    queueActivatedText,\n    approveButton,\n    rejectButton,\n    albumArt,\n    menuItem,\n    activeButton,\n    requestsTable,\n    sortByText,\n    inactiveText,\n    logo,\n    welcomeContainer\n} from './Home.module.css'\nimport { isMobile } from 'react-device-detect'\nimport { \n    PageHeader, \n    Switch, \n    Table, \n    List, \n    Button, \n    notification, \n    Drawer,\n    Dropdown,\n    Menu,\n    Spin\n} from 'antd'\nimport { \n    CheckOutlined, \n    CloseOutlined, \n    SettingOutlined,\n    DownOutlined,\n    UpOutlined,\n    LoadingOutlined\n} from '@ant-design/icons'\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\nimport 'antd/dist/antd.css'\nimport axios from 'axios'\nimport { getURL, logoUrl } from '../util'\nimport { useState, useRef } from 'react'\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\"\n\nconst Home = () => {\n    const turnOnCode = false\n    const [userId, setUserId] = useState(null)\n    const [queueActivated, setQueueActivated] = useState(false)\n    const [code, setCode] = useState('')\n    const [requests, setRequests] = useState([])\n    const [userName, setUserName] = useState('')\n    const [sortKey, setSortKey] = useState('oldest')\n    const [loading, setLoading] = useState([])\n    const [pageLoading, setPageLoading] = useState(true)\n    const [autoAcceptLoading, setAutoAcceptLoading] = useState(false)\n    const [approveAllLoading, setApproveAllLoading] = useState(false)\n    const [rejectAllLoading, setRejectAllLoading] = useState(false)\n    const [autoAccept, setAutoAccept] = useState(false)\n    const [menuVisible, setMenuVisible] = useState(false)\n    const [dropdownVisible, setDropdownVisible] = useState(false)\n    const requestsRef = useRef(requests)\n    const sortKeyRef = useRef(sortKey)\n    const errorHandle = err => {\n        if (err.response) {\n            if (err.response.status) {\n                if (err.response.status === 401) {\n                    window.location.href = '/login'\n                } else {\n                    notification['error']({\n                        message: 'Server Error',\n                        description: 'Please try again later'\n                    })\n                }\n            } else {\n                notification['error']({\n                    message: 'Server Error',\n                    description: 'Please try again later'\n                })\n            }\n        } else {\n            notification['error']({\n                message: 'Server Error',\n                description: 'Please try again later'\n            })\n        }\n    }\n    useEffect(() => {\n        setPageLoading(true)\n        document.title = 'Welcome to SongQ!'\n        axios.get(`${getURL()}/get-user-details`, { withCredentials: true })\n            .then(response => {\n                const { user } = response.data\n                setQueueActivated(user.queueActivated)\n                setCode(user.code)\n                setUserId(user.userId)\n                setRequests(user.requests)\n                setUserName(user.name)\n                setAutoAccept(user.autoAccept)\n            })\n            .catch(err => {\n                errorHandle(err)\n                console.log(err)\n            })\n            .finally(() => {\n                setPageLoading(false)\n            })\n    }, [queueActivated])\n    useEffect(() => { requestsRef.current = requests }, [requests])\n    useEffect(() => {\n        sortKeyRef.current = sortKey\n        sortBy(sortKey) \n    }, [sortKey])\n    useEffect(() => {\n        axios.post(`${getURL()}/can-create-ws-connection`, {}, { withCredentials: true })\n            .then(response => {\n                const { id } = response.data\n                const client = new W3CWebSocket(\n                    `${window.location.protocol === 'https:' ? 'wss:' : 'ws:'}//${window.location.hostname === 'localhost' ? `localhost:5000` : 'api.songq.io'}/connect?id=${id}`\n                )\n                client.onmessage = message => {\n                    const { data } = message\n                    if (data.substring(0, 12) === 'new-request:') {\n                        const newRequest = JSON.parse(data.substring(12, data.length))\n                        axios.get(`${getURL()}/get-requests`, { withCredentials: true })\n                            .then(response => {\n                                const { requests } = response.data\n                                setRequests(formatRequests(requests).sort(getSortComparator(sortKeyRef.current)))\n                            })\n                            .catch(err => {\n                                console.log(err)\n                                setRequests(formatRequests([...requestsRef.current, newRequest]).sort(getSortComparator(sortKeyRef.current)))\n                            })\n                    } else if (data.substring(0, 12) === 'aew-request:') {\n                        const newRequest = JSON.parse(data.substring(12, data.length))\n                        notification['success']({\n                            message: 'Succesfully auto queued',\n                            description: `${newRequest.songName} by ${newRequest.artists} was succesfully queued!`\n                        })                    \n                    }\n                    \n                }\n            })\n            .catch(err => {\n                console.log(err)\n            })\n        \n    })\n    const formatRequests = requests => {\n        const formatted = []\n        requests.forEach(request => {\n            if (formatted.length === 0) {\n                formatted.push({\n                    ...request,\n                    votes: request.votes ? request.votes : 1\n                })\n            } else {\n                let found = false\n                for (let i = 0; i < formatted.length; i++) {\n                    if (formatted[i].songId === request.songId) {\n                        formatted[i].votes += 1\n                        found = true\n                        break\n                    }\n                }\n                if (!found) {\n                    formatted.push({\n                        ...request,\n                        votes: request.votes ? request.votes : 1\n                    })\n                }\n            }\n        })\n        return formatted\n    }\n    const onCheckedButtonChange = activated => {\n        axios.patch(`${getURL()}/change-queue-activation`, { userId, activated }, { withCredentials: true })\n            .then(() => {\n                setQueueActivated(activated)\n            })\n            .catch(err => {\n                errorHandle(err)\n                console.log(err.response)\n            })\n    }\n    const generateData = () => {\n        const result = []\n        let i = 1\n        const formattedRequests = formatRequests(requests)\n        formattedRequests.forEach(r => {\n            result.push({\n                key: `${i}`,\n                track: {\n                    songName: r.songName,\n                    albumArt: r.albumArt,\n                    artists: r.artists\n                },\n                votes: r.votes,\n                approveOrReject: r._id\n            })\n            i++\n        })\n        return result\n    }\n    const approveReject = (requestId, accepted) => {\n        const elementId = `${requestId}_${accepted ? 'approve' : 'rejected' }`\n        loading.push(elementId)\n        setLoading([...loading])\n        axios.post(`${getURL()}/service-request`, { requestId, accepted }, { withCredentials: true })\n            .then(() => {\n                for (let i = 0; i < requests.length; i++) {\n                    const r = requests[i]\n                    if (r._id === requestId) {\n                        requests.splice(i, 1)\n                        const { songId } = r\n                        for (let j = 0; j < requests.length; j++) {\n                            if (requests[j].songId === songId) {\n                                requests.splice(j, 1)\n                            }\n                        }\n                        setRequests([...requests])\n                        break\n                    }\n                }           \n            })\n            .catch((err) => {\n                if (err.response) {\n                    if (err.response.data) {\n                        if (err.response.data.err && err.response.data.err === 'no queue') {\n                            return notification['error']({\n                                message: 'No queue found',\n                                description: 'Please make sure your queue is active'\n                            })\n                        }\n                    }\n                }\n                errorHandle(err)\n            })\n            .finally(() => {\n                loading.splice(elementId, 1)\n                setLoading([...loading])\n            })\n    }\n    const approveRejectAll = accepted => {\n        if (accepted) {\n            setApproveAllLoading(true)\n        } else {\n            setRejectAllLoading(true)\n        }\n        axios.post(`${getURL()}/service-all`, { accepted }, { withCredentials: true})\n            .then(() => {\n                setPageLoading(false)\n                setRequests([])\n            })\n            .catch(err => {\n                if (err.response) {\n                    if (err.response.data) {\n                        if (err.response.data.err) {\n                            if (err.response.data.err === 'no queue') {\n                                return notification['error']({\n                                    message: 'No queue found',\n                                    description: 'Please make sure your queue is active'\n                                })\n                            }\n                        }\n                    }\n                }\n                errorHandle(err)\n            })\n            .finally(() => {\n                if (accepted) {\n                    setApproveAllLoading(false)\n                } else {\n                    setRejectAllLoading(false)\n                }\n            })\n    }     \n    const sortAlphabetically = (e1, e2, key) => {\n        if(e1[key].toLowerCase() < e2[key].toLowerCase()) { return -1 }\n        if(e1[key].toLowerCase() > e2[key].toLowerCase()) { return 1 }\n        return 0\n    }\n    const sortDate = (e1, e2, key) => {\n        return new Date(e1[key]) - new Date(e2[key])\n    }\n    const getSortComparator = sortKey => {\n        let sortComparator\n        switch (sortKey) {\n            case 'newest':\n                sortComparator = (r1, r2) => {\n                    return sortDate(r2, r1, 'createdAt')\n                }\n                break\n            case 'oldest':\n                sortComparator = (r1, r2) => {\n                    return sortDate(r1, r2, 'createdAt')\n                }\n                break\n            case 'title':\n                sortComparator = (r1, r2) => {\n                    return sortAlphabetically(r1, r2, 'songName')\n                }\n                break\n            case 'artists':\n                sortComparator = (r1, r2) => {\n                    return sortAlphabetically(r1, r2, 'artists')\n                }\n                break\n            case 'votes':\n                sortComparator = (r1, r2) => {\n                    return r2.votes - r1.votes\n                }\n                break\n            default:\n                sortComparator = () => 0\n        }\n        return sortComparator\n    }\n    const sortBy = sortKey => {\n        const sortComparator = getSortComparator(sortKey)\n        const newRequests = formatRequests(requestsRef.current).sort(sortComparator)\n        setRequests(() => [...newRequests])\n    }\n    const showCopyNotification = () => {\n        notification['success']({\n            message: 'Copied Succesfully',\n            description: 'Link copied to clipboard'\n        })\n    }\n    const onAutoAcceptChange = autoAcceptNew => {\n        setAutoAcceptLoading(true)\n        axios.post(`${getURL()}/change-auto-accept`, { autoAccept: autoAcceptNew }, { withCredentials: true })\n            .then(() => {\n                setAutoAccept(autoAcceptNew)\n                if (autoAcceptNew) {\n                    approveRejectAll(true)\n                }\n            })\n            .catch(err => {\n                if (err.response) {\n                    if (err.response.data) {\n                        if (err.response.data.err) {\n                            if (err.response.data.err === 'queue inactive') {\n                                notification['error']({\n                                    message: 'Please open Spotify',\n                                    description: 'Cannot activate auto accept if no player is active'\n                                })\n                            }\n                        }\n                    }\n                }\n                console.log(err)\n            })\n            .finally(() => {\n                setAutoAcceptLoading(false)\n            })\n    }\n    const columns = [\n        {\n            title: 'Track',\n            dataIndex: 'track',\n            key: 'track',\n            width: '50%',\n            render: track => (\n                <List.Item>\n                    <List.Item.Meta \n                        avatar={\n                            <img \n                                alt='album art' \n                                src={track.albumArt} \n                                className={albumArt}\n                        />}\n                        title={track.songName}\n                        description={track.artists}\n                    />\n                </List.Item>\n            ),\n        },\n        {\n            title: 'Votes',\n            dataIndex: 'votes',\n            key: 'votes',\n            width: '20%',\n            render: votes => (\n                <p>{`${votes}`}</p>\n            )\n        },\n        {\n            title: 'Approve Or Reject',\n            dataIndex: 'approveOrReject',\n            key: 'approveOrReject',\n            width: '30%',\n            render: requestId => (\n                <div>\n                    <Button \n                        className={approveButton} \n                        onClick={() => approveReject(requestId, true)}\n                        id={`${requestId}_approve`}\n                        loading={loading.includes(`${requestId}_approve`)}\n                        icon={<CheckOutlined />}\n                    />\n                    <Button \n                        className={rejectButton}\n                        danger \n                        onClick={() => approveReject(requestId, false)}\n                        id={`${requestId}_reject`}\n                        loading={loading.includes(`${requestId}_reject`)}\n                        icon={<CloseOutlined />}\n                    />\n                </div>\n            )\n        }\n    ]\n    const menu = (\n        <Menu>\n            <Menu.Item onClick={() => setSortKey('oldest')}>\n                Oldest\n            </Menu.Item>\n            <Menu.Item onClick={() => setSortKey('newest')}>\n                Newest\n            </Menu.Item>\n            <Menu.Item onClick={() => setSortKey('title')}>\n                Title\n            </Menu.Item>\n            <Menu.Item onClick={() => setSortKey('artists')}>\n                Artists\n            </Menu.Item>\n            <Menu.Item onClick={() => setSortKey('votes')}>\n                Votes\n            </Menu.Item>\n        </Menu>\n    )\n    return (\n        <div>\n            <Spin spinning={pageLoading} indicator={<LoadingOutlined spin />}>\n                <Drawer \n                    visible={menuVisible}\n                    title=\"Menu\"\n                    onClose={() => setMenuVisible(false)}\n                >\n                    <div className={menuItem}>\n                        Auto Accept:\n                        <Switch\n                            checked={autoAccept}\n                            onChange={onAutoAcceptChange}\n                            style={{ marginLeft: '5px', marginRight: '5px'}}\n                            loading={autoAcceptLoading}\n                        />\n                    </div>\n                    <div className={menuItem}>\n                        <Button\n                            className={approveButton} \n                            onClick={() => approveRejectAll(true)}\n                            loading={approveAllLoading}\n                            style={isMobile ? { padding :'4px 10px'} : {}}\n                            disabled={autoAccept}\n                        >\n                            Approve All\n                        </Button>\n                    </div>\n                    <div className={menuItem}>\n                        <Button \n                            className={rejectButton}\n                            danger \n                            onClick={() => approveRejectAll(false)}\n                            loading={rejectAllLoading}\n                            style={isMobile ? { padding :'4px 10px' } : {}}\n                            disabled={autoAccept}\n                        >\n                            Reject All\n                        </Button>\n                    </div>\n                </Drawer>\n                <PageHeader\n                    title={\n                    <div className={welcomeContainer}>\n                        <img className={logo} src={logoUrl}/>\n                        <span>{(userName !== '' && userName !== undefined) ? `Welcome, ${userName}!` : `Welcome!`}</span>\n                    </div>}\n                    className={header}\n                    extra={[\n                        <div>\n                            <div>\n                                <Button\n                                    ghost={!queueActivated}\n                                    className={!queueActivated ? '' : activeButton}\n                                    shape='round'\n                                    onClick={() => onCheckedButtonChange(!queueActivated)}\n                                    style={{ marginRight: '0.5rem'}}\n                                >\n                                    {queueActivated ? 'Active' : 'Inactive'}\n                                </Button>\n                                <CopyToClipboard \n                                    text={`${window.location.protocol}//${window.location.hostname}${window.location.hostname === 'localhost' ? `:${window.location.port}` : ''}/queue/${userId}`}\n                                    onCopy={() => showCopyNotification()}\n                                >\n                                    <Button shape='round' ghost>Copy Link</Button>\n                                </CopyToClipboard>\n                                <Button \n                                    ghost \n                                    icon={<SettingOutlined />} \n                                    style={{border: 'none'}} \n                                    onClick={() => setMenuVisible(!menuVisible)} \n                                />\n                            </div>\n                            {turnOnCode ? <p className={queueActivatedText}>{queueActivated ? `Code: ${code}` : `Queue Disabled`}</p> : ''}\n                        </div>,\n                    ]}\n                />\n                {queueActivated ? <div>\n                    <Dropdown overlay={menu} trigger={'click'} onVisibleChange={visible => setDropdownVisible(visible)}>\n                        <span className={sortByText}>Sort by {dropdownVisible ? <UpOutlined /> : <DownOutlined />}</span>\n                    </Dropdown>\n                </div> : ''}\n                {queueActivated ? \n                    <Table columns={columns} dataSource={generateData()} className={requestsTable}/> : \n                    <p className={inactiveText}>Activate your queue by clicking the 'Inactive' button above to see requests</p>}\n            </Spin>\n        </div>\n    )\n}\n\nexport default Home\n","/Users/gautamjethwani/Documents/songq-ui/src/GuestHome/index.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/GuestHome/GuestHome.js",["58","59","60","61"],"/Users/gautamjethwani/Documents/songq-ui/src/util.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/FooterComponent/index.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/FooterComponent/FooterComponent.js",[],{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":23,"column":17,"nodeType":"68","endLine":23,"endColumn":55},{"ruleId":"69","severity":1,"message":"70","line":111,"column":8,"nodeType":"71","endLine":111,"endColumn":17,"suggestions":"72"},{"ruleId":"66","severity":1,"message":"67","line":475,"column":25,"nodeType":"68","endLine":475,"endColumn":62},{"ruleId":"73","severity":1,"message":"74","line":7,"column":5,"nodeType":"75","messageId":"76","endLine":7,"endColumn":9},{"ruleId":"73","severity":1,"message":"77","line":20,"column":44,"nodeType":"75","messageId":"76","endLine":20,"endColumn":59},{"ruleId":"69","severity":1,"message":"78","line":91,"column":8,"nodeType":"71","endLine":91,"endColumn":10,"suggestions":"79"},{"ruleId":"66","severity":1,"message":"67","line":222,"column":21,"nodeType":"68","endLine":222,"endColumn":58},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'sortBy'. Either include it or remove the dependency array.","ArrayExpression",["82"],"no-unused-vars","'Spin' is defined but never used.","Identifier","unusedVar","'LoadingOutlined' is defined but never used.","React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.",["83"],"no-global-assign","no-unsafe-negation",{"desc":"84","fix":"85"},{"desc":"86","fix":"87"},"Update the dependencies array to be: [sortBy, sortKey]",{"range":"88","text":"89"},"Update the dependencies array to be: [userId]",{"range":"90","text":"91"},[3504,3513],"[sortBy, sortKey]",[3203,3205],"[userId]"]