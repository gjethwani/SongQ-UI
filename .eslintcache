[{"/Users/gautamjethwani/Documents/songq-ui/src/reportWebVitals.js":"1","/Users/gautamjethwani/Documents/songq-ui/src/App.js":"2","/Users/gautamjethwani/Documents/songq-ui/src/index.js":"3","/Users/gautamjethwani/Documents/songq-ui/src/Login/index.js":"4","/Users/gautamjethwani/Documents/songq-ui/src/Login/Login.js":"5","/Users/gautamjethwani/Documents/songq-ui/src/Home/index.js":"6","/Users/gautamjethwani/Documents/songq-ui/src/Home/Home.js":"7","/Users/gautamjethwani/Documents/songq-ui/src/GuestHome/index.js":"8","/Users/gautamjethwani/Documents/songq-ui/src/GuestHome/GuestHome.js":"9","/Users/gautamjethwani/Documents/songq-ui/src/util.js":"10","/Users/gautamjethwani/Documents/songq-ui/src/FooterComponent/index.js":"11","/Users/gautamjethwani/Documents/songq-ui/src/FooterComponent/FooterComponent.js":"12","/Users/gautamjethwani/Documents/songq-ui/src/Tour/index.js":"13","/Users/gautamjethwani/Documents/songq-ui/src/Tour/Tour.js":"14"},{"size":362,"mtime":1609565627382,"results":"15","hashOfConfig":"16"},{"size":1225,"mtime":1610862734591,"results":"17","hashOfConfig":"16"},{"size":500,"mtime":1610357481641,"results":"18","hashOfConfig":"16"},{"size":48,"mtime":1609566008982,"results":"19","hashOfConfig":"16"},{"size":1280,"mtime":1611638345961,"results":"20","hashOfConfig":"16"},{"size":45,"mtime":1609568096052,"results":"21","hashOfConfig":"16"},{"size":24705,"mtime":1611877132245,"results":"22","hashOfConfig":"16"},{"size":60,"mtime":1609615551780,"results":"23","hashOfConfig":"16"},{"size":9244,"mtime":1611884043081,"results":"24","hashOfConfig":"16"},{"size":724,"mtime":1611647288657,"results":"25","hashOfConfig":"16"},{"size":78,"mtime":1610357099679,"results":"26","hashOfConfig":"16"},{"size":988,"mtime":1610510534159,"results":"27","hashOfConfig":"16"},{"size":45,"mtime":1611642423313,"results":"28","hashOfConfig":"16"},{"size":3644,"mtime":1611702078380,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"3t1696",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"59"},"/Users/gautamjethwani/Documents/songq-ui/src/reportWebVitals.js",[],["63","64"],"/Users/gautamjethwani/Documents/songq-ui/src/App.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/index.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/Login/index.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/Login/Login.js",["65"],"import { \n    loginContainer,\n    flexContainer,\n    welcome,\n    logo\n} from './Login.module.css'\nimport { useEffect } from 'react'\nimport { Button, notification } from 'antd'\nimport { getURL, logoUrl } from '../util'\nimport 'antd/dist/antd.css'\n\nconst Login = () => {\n    const getQuery = () => {\n        return new URLSearchParams(window.location.search)\n    }\n    useEffect(() => {\n        document.title = 'Welcome to SongQ!'\n        const query = getQuery()\n        const err = query.get('err')\n        if (err === 'nopremium') {\n            notification['error']({\n                message: 'Cannot Login',\n                description: 'You need Spotify Premium to use SongQ'\n            })\n        }\n    })\n    const login = () => {\n        window.location.href = `${getURL()}/spotify-login`\n    }\n    return (\n        <div className={loginContainer}>\n            <div className={flexContainer}>\n                {/* <h1 className={welcome}>Welcome to SongQ</h1> */}\n                <img src={logoUrl} className={logo} />\n                <Button ghost shape=\"round\" onClick={login}>Sign in with Spotify</Button>\n                <p className={welcome}>Sign in with your Spotify account to access your queue</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Login\n","/Users/gautamjethwani/Documents/songq-ui/src/Home/index.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/Home/Home.js",["66","67","68","69"],"import { useEffect } from 'react'\nimport {\n    header,\n    queueActivatedText,\n    approveButton,\n    rejectButton,\n    albumArt,\n    menuItem,\n    activeButton,\n    requestsTable,\n    sortByText,\n    inactiveText,\n    logo,\n    welcomeContainer,\n    welcomeText\n} from './Home.module.css'\nimport { isMobile } from 'react-device-detect'\nimport { \n    PageHeader, \n    Switch, \n    Table, \n    List, \n    Button, \n    notification, \n    Drawer,\n    Dropdown,\n    Menu,\n    Spin,\n    Avatar,\n    Popover\n} from 'antd'\nimport { \n    CheckOutlined, \n    CloseOutlined, \n    MenuOutlined,\n    DownOutlined,\n    UpOutlined,\n    LoadingOutlined,\n    UserOutlined\n} from '@ant-design/icons'\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\nimport 'antd/dist/antd.css'\nimport axios from 'axios'\nimport { getURL, logoUrl, featureFlags, currUrl } from '../util'\nimport { useState, useRef } from 'react'\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\"\nimport { useCookies } from 'react-cookie'\n\nconst Home = () => {\n    const { turnOnCodeFeatureEnabled, queueActiveButtonFeatureEnabled } = featureFlags\n    const [userId, setUserId] = useState(null)\n    const [queueActivated, setQueueActivated] = useState(false)\n    const [code, setCode] = useState('')\n    const [requests, setRequests] = useState([])\n    const [userName, setUserName] = useState('')\n    const [sortKey, setSortKey] = useState('oldest')\n    const [loading, setLoading] = useState([])\n    const [pageLoading, setPageLoading] = useState(true)\n    const [autoAcceptLoading, setAutoAcceptLoading] = useState(false)\n    const [approveAllLoading, setApproveAllLoading] = useState(false)\n    const [rejectAllLoading, setRejectAllLoading] = useState(false)\n    const [autoAccept, setAutoAccept] = useState(false)\n    const [menuVisible, setMenuVisible] = useState(false)\n    const [dropdownVisible, setDropdownVisible] = useState(false)\n    const [profilePicture, setProfilePicture] = useState('')\n    const [cookies, setCookie] = useCookies()\n    const [currTourStep, setCurrTourStep] = useState(0)\n    const [tourVisible, setTourVisible] = useState(false)\n    const requestsRef = useRef(requests)\n    const sortKeyRef = useRef(sortKey)\n    const errorHandle = err => {\n        if (err.response) {\n            if (err.response.status) {\n                if (err.response.status === 401) {\n                    window.location.href = '/login'\n                } else {\n                    notification['error']({\n                        message: 'Server Error',\n                        description: 'Please try again later'\n                    })\n                }\n            } else {\n                notification['error']({\n                    message: 'Server Error',\n                    description: 'Please try again later'\n                })\n            }\n        } else {\n            notification['error']({\n                message: 'Server Error',\n                description: 'Please try again later'\n            })\n        }\n    }\n    useEffect(() => {\n        setPageLoading(true)\n        document.title = 'Welcome to SongQ!'\n        axios.get(`${getURL()}/get-user-details`, { withCredentials: true })\n            .then(response => {\n                const { user } = response.data\n                setQueueActivated(user.queueActivated)\n                setCode(user.code)\n                setUserId(user.userId)\n                setRequests(user.requests)\n                setUserName(user.name)\n                setAutoAccept(user.autoAccept)\n                setProfilePicture(user.profilePicture)\n                const { tourShown } = cookies\n                if (!tourShown) {\n                    setTourVisible(true)\n                    setCookie('tourShown', true)\n                }\n            })\n            .catch(err => {\n                errorHandle(err)\n                console.log(err)\n            })\n            .finally(() => {\n                setPageLoading(false)\n            })\n    }, [queueActivated])\n    useEffect(() => { requestsRef.current = requests }, [requests])\n    useEffect(() => { \n        if (currTourStep === 2) {\n            setMenuVisible(true)\n        } else {\n            if (menuVisible) {\n                setMenuVisible(false)\n            }\n        }\n        if (tourVisible === false) {\n            setMenuVisible(false)\n        }\n    } , [currTourStep, tourVisible])\n    useEffect(() => {\n        sortKeyRef.current = sortKey\n        sortBy(sortKey) \n    }, [sortKey])\n    useEffect(() => {\n        axios.post(`${getURL()}/can-create-ws-connection`, {}, { withCredentials: true })\n            .then(response => {\n                const { id } = response.data\n                const client = new W3CWebSocket(\n                    `${window.location.protocol === 'https:' ? 'wss:' : 'ws:'}//${window.location.hostname === 'localhost' ? `localhost:5000` : 'api.songq.io'}/connect?id=${id}`\n                )\n                client.onmessage = message => {\n                    const { data } = message\n                    if (data.substring(0, 12) === 'new-request:') {\n                        const newRequest = JSON.parse(data.substring(12, data.length))\n                        axios.get(`${getURL()}/get-requests`, { withCredentials: true })\n                            .then(response => {\n                                const { requests } = response.data\n                                setRequests(formatRequests(requests).sort(getSortComparator(sortKeyRef.current)))\n                            })\n                            .catch(err => {\n                                console.log(err)\n                                setRequests(formatRequests([...requestsRef.current, newRequest]).sort(getSortComparator(sortKeyRef.current)))\n                            })\n                    } else if (data.substring(0, 12) === 'aew-request:') {\n                        const newRequest = JSON.parse(data.substring(12, data.length))\n                        notification['success']({\n                            message: 'Succesfully auto queued',\n                            description: `${newRequest.songName} by ${newRequest.artists} was succesfully queued!`\n                        })                    \n                    }\n                    \n                }\n            })\n            .catch(err => {\n                console.log(err)\n            })\n        \n    })\n    const nextTourStep = () => {\n        if (currTourStep === tourSteps.length-1) {\n            setCookie('tourShown', true)\n            setTourVisible(false)\n        } else {\n            setCurrTourStep(currTourStep + 1)\n        }\n    }\n    const previousTourStep = () => {\n        if (currTourStep > 0) {\n            setCurrTourStep(currTourStep - 1)\n        }\n    }\n    const formatRequests = requests => {\n        const formatted = []\n        requests.forEach(request => {\n            if (formatted.length === 0) {\n                formatted.push({\n                    ...request,\n                    votes: request.votes ? request.votes : 1\n                })\n            } else {\n                let found = false\n                for (let i = 0; i < formatted.length; i++) {\n                    if (formatted[i].songId === request.songId) {\n                        formatted[i].votes += 1\n                        found = true\n                        break\n                    }\n                }\n                if (!found) {\n                    formatted.push({\n                        ...request,\n                        votes: request.votes ? request.votes : 1\n                    })\n                }\n            }\n        })\n        return formatted\n    }\n    const onCheckedButtonChange = activated => {\n        axios.patch(`${getURL()}/change-queue-activation`, { userId, activated }, { withCredentials: true })\n            .then(() => {\n                setQueueActivated(activated)\n            })\n            .catch(err => {\n                errorHandle(err)\n                console.log(err.response)\n            })\n    }\n    const generateData = () => {\n        const result = []\n        let i = 1\n        const formattedRequests = formatRequests(requests)\n        formattedRequests.forEach(r => {\n            result.push({\n                key: `${i}`,\n                track: {\n                    songName: r.songName,\n                    albumArt: r.albumArt,\n                    artists: r.artists\n                },\n                votes: r.votes,\n                approveOrReject: r._id\n            })\n            i++\n        })\n        return result\n    }\n    const approveReject = (requestId, accepted) => {\n        const elementId = `${requestId}_${accepted ? 'approve' : 'rejected' }`\n        loading.push(elementId)\n        setLoading([...loading])\n        axios.post(`${getURL()}/service-request`, { requestId, accepted }, { withCredentials: true })\n            .then(() => {\n                for (let i = 0; i < requests.length; i++) {\n                    const r = requests[i]\n                    if (r._id === requestId) {\n                        requests.splice(i, 1)\n                        const { songId } = r\n                        for (let j = 0; j < requests.length; j++) {\n                            if (requests[j].songId === songId) {\n                                requests.splice(j, 1)\n                            }\n                        }\n                        setRequests([...requests])\n                        break\n                    }\n                }           \n            })\n            .catch((err) => {\n                if (err.response) {\n                    if (err.response.data) {\n                        if (err.response.data.err && err.response.data.err === 'no queue') {\n                            return notification['error']({\n                                message: 'No queue found',\n                                description: 'Please make sure your queue is active'\n                            })\n                        }\n                    }\n                }\n                errorHandle(err)\n            })\n            .finally(() => {\n                loading.splice(elementId, 1)\n                setLoading([...loading])\n            })\n    }\n    const approveRejectAll = accepted => {\n        if (accepted) {\n            setApproveAllLoading(true)\n        } else {\n            setRejectAllLoading(true)\n        }\n        axios.post(`${getURL()}/service-all`, { accepted }, { withCredentials: true})\n            .then(() => {\n                setPageLoading(false)\n                setRequests([])\n            })\n            .catch(err => {\n                if (err.response) {\n                    if (err.response.data) {\n                        if (err.response.data.err) {\n                            if (err.response.data.err === 'no queue') {\n                                return notification['error']({\n                                    message: 'No queue found',\n                                    description: 'Please make sure your queue is active'\n                                })\n                            }\n                        }\n                    }\n                }\n                errorHandle(err)\n            })\n            .finally(() => {\n                if (accepted) {\n                    setApproveAllLoading(false)\n                } else {\n                    setRejectAllLoading(false)\n                }\n            })\n    }     \n    const sortAlphabetically = (e1, e2, key) => {\n        if(e1[key].toLowerCase() < e2[key].toLowerCase()) { return -1 }\n        if(e1[key].toLowerCase() > e2[key].toLowerCase()) { return 1 }\n        return 0\n    }\n    const sortDate = (e1, e2, key) => {\n        return new Date(e1[key]) - new Date(e2[key])\n    }\n    const getSortComparator = sortKey => {\n        let sortComparator\n        switch (sortKey) {\n            case 'newest':\n                sortComparator = (r1, r2) => {\n                    return sortDate(r2, r1, 'createdAt')\n                }\n                break\n            case 'oldest':\n                sortComparator = (r1, r2) => {\n                    return sortDate(r1, r2, 'createdAt')\n                }\n                break\n            case 'title':\n                sortComparator = (r1, r2) => {\n                    return sortAlphabetically(r1, r2, 'songName')\n                }\n                break\n            case 'artists':\n                sortComparator = (r1, r2) => {\n                    return sortAlphabetically(r1, r2, 'artists')\n                }\n                break\n            case 'votes':\n                sortComparator = (r1, r2) => {\n                    return r2.votes - r1.votes\n                }\n                break\n            default:\n                sortComparator = () => 0\n        }\n        return sortComparator\n    }\n    const sortBy = sortKey => {\n        const sortComparator = getSortComparator(sortKey)\n        const newRequests = formatRequests(requestsRef.current).sort(sortComparator)\n        setRequests(() => [...newRequests])\n    }\n    const showCopyNotification = () => {\n        notification['success']({\n            message: 'Copied Succesfully',\n            description: 'Link copied to clipboard'\n        })\n    }\n    const onAutoAcceptChange = autoAcceptNew => {\n        setAutoAcceptLoading(true)\n        axios.post(`${getURL()}/change-auto-accept`, { autoAccept: autoAcceptNew }, { withCredentials: true })\n            .then(() => {\n                setAutoAccept(autoAcceptNew)\n                if (autoAcceptNew) {\n                    approveRejectAll(true)\n                }\n            })\n            .catch(err => {\n                if (err.response) {\n                    if (err.response.data) {\n                        if (err.response.data.err) {\n                            if (err.response.data.err === 'queue inactive') {\n                                notification['error']({\n                                    message: 'Please open Spotify',\n                                    description: 'Cannot activate auto accept if no player is active'\n                                })\n                            }\n                        }\n                    }\n                }\n                console.log(err)\n            })\n            .finally(() => {\n                setAutoAcceptLoading(false)\n            })\n    }\n    const getDrawerTitle = () => {\n        if (profilePicture === '' || profilePicture === undefined) {\n            return <div>\n                <Avatar icon={<UserOutlined />} />\n                <span className={welcomeText}>{(userName !== '' && userName !== undefined) ? `Welcome, ${userName}!` : `Welcome!`}</span>\n            </div>\n        } else {\n            return <div>\n                <Avatar src={profilePicture} />\n                <span className={welcomeText}>{(userName !== '' && userName !== undefined) ? `Welcome, ${userName}!` : `Welcome!`}</span>\n            </div>\n        }\n    }\n    const columns = [\n        {\n            title: 'Votes',\n            dataIndex: 'votes',\n            key: 'votes',\n            width: '10%',\n            render: votes => (\n                <p>{`${votes}`}</p>\n            )\n        },\n        {\n            title: 'Track',\n            dataIndex: 'track',\n            key: 'track',\n            width: '60%',\n            render: track => (\n                <List.Item>\n                    <List.Item.Meta \n                        avatar={\n                            <img \n                                alt='album art' \n                                src={track.albumArt} \n                                className={albumArt}\n                        />}\n                        title={track.songName}\n                        description={track.artists}\n                    />\n                </List.Item>\n            ),\n        },\n        {\n            title: 'Approve Or Reject',\n            dataIndex: 'approveOrReject',\n            key: 'approveOrReject',\n            width: '30%',\n            render: requestId => (\n                <div>\n                    <Button \n                        className={approveButton} \n                        onClick={() => approveReject(requestId, true)}\n                        id={`${requestId}_approve`}\n                        loading={loading.includes(`${requestId}_approve`)}\n                        icon={<CheckOutlined />}\n                    />\n                    <Button \n                        className={rejectButton}\n                        danger \n                        onClick={() => approveReject(requestId, false)}\n                        id={`${requestId}_reject`}\n                        loading={loading.includes(`${requestId}_reject`)}\n                        icon={<CloseOutlined />}\n                    />\n                </div>\n            )\n        }\n    ]\n    const menu = (\n        <Menu>\n            <Menu.Item onClick={() => setSortKey('oldest')}>\n                Oldest\n            </Menu.Item>\n            <Menu.Item onClick={() => setSortKey('newest')}>\n                Newest\n            </Menu.Item>\n            <Menu.Item onClick={() => setSortKey('title')}>\n                Title\n            </Menu.Item>\n            <Menu.Item onClick={() => setSortKey('artists')}>\n                Artists\n            </Menu.Item>\n            <Menu.Item onClick={() => setSortKey('votes')}>\n                Votes\n            </Menu.Item>\n        </Menu>\n    )\n    const tourSteps = [\n        {\n            index: 0,\n            title: 'Queue Link',\n            content: <div>\n                <p>Use the 'Copy Link' button to get a shareable link for people to request tracks to your queue.</p>\n                <Button onClick={() => setTourVisible(false)}>Skip Tour</Button>\n                <Button type='primary' onClick={() => nextTourStep()}>Next</Button>\n            </div>\n        },\n        {\n            index: 1,\n            title: 'Requests',\n            content: <div>\n                <p>Your requests are here. You can approve or deny them, see details about the track and votes garnered.</p>\n                <p>On approval, the track will be added to your Spotify queue.</p>\n                <Button onClick={() => setTourVisible(false)}>Skip Tour</Button>\n                <Button onClick={() => previousTourStep()}>Previous</Button>\n                <Button type='primary' onClick={() => nextTourStep()}>Next</Button>\n            </div>\n        },\n        {\n            index: 2,\n            title: 'Extra Actions',\n            content: <div>\n                <p>Use this menu to enable Auto Accept for all current and future requests.</p>\n                <p>You can use the 'Approve All' and 'Reject All' buttons to clear your current requests.</p>\n                <Button onClick={() => previousTourStep()}>Previous</Button>\n                <Button type='primary' onClick={() => nextTourStep()}>Finish</Button>\n            </div>\n        }\n    ]\n    return (\n        <div>\n            <Spin spinning={pageLoading} indicator={<LoadingOutlined spin />}>\n                <Popover placement='rightBottom' visible={currTourStep === 2 && tourVisible} title={tourSteps[2].title} content={tourSteps[2].content}>\n                    <Drawer \n                        visible={menuVisible}\n                        title={ getDrawerTitle()}\n                        onClose={() => setMenuVisible(false)}\n                        footer={\n                        <Button \n                            ghost \n                            type='primary'\n                            shape='round' \n                            style={{ marginLeft: '14px'}}\n                            onClick={() => setTourVisible(true)}\n                        >\n                            Show Me Around\n                        </Button>}\n                    >\n                        <div className={menuItem}>\n                            Auto Accept:\n                            <Switch\n                                checked={autoAccept}\n                                onChange={onAutoAcceptChange}\n                                style={{ marginLeft: '5px', marginRight: '5px'}}\n                                loading={autoAcceptLoading}\n                            />\n                        </div>\n                        <div className={menuItem}>\n                            <Button\n                                className={approveButton} \n                                onClick={() => approveRejectAll(true)}\n                                loading={approveAllLoading}\n                                style={isMobile ? { padding :'4px 10px'} : {}}\n                                disabled={autoAccept}\n                            >\n                                Approve All\n                            </Button>\n                        </div>\n                        <div className={menuItem}>\n                            <Button \n                                className={rejectButton}\n                                danger \n                                onClick={() => approveRejectAll(false)}\n                                loading={rejectAllLoading}\n                                style={isMobile ? { padding :'4px 10px' } : {}}\n                                disabled={autoAccept}\n                            >\n                                Reject All\n                            </Button>\n                        </div>\n                    </Drawer>\n                </Popover>\n                <PageHeader\n                    title={\n                    <div className={welcomeContainer}>\n                        <img className={logo} src={logoUrl} style={isMobile ? { width: '40%'} : {}}/>\n                    </div>}\n                    className={header}\n                    extra={[\n                        <div>\n                            <div>\n                                {queueActiveButtonFeatureEnabled && <Button\n                                    ghost={!queueActivated}\n                                    className={!queueActivated ? '' : activeButton}\n                                    shape='round'\n                                    onClick={() => onCheckedButtonChange(!queueActivated)}\n                                    style={{ marginRight: '0.5rem'}}\n                                >\n                                    {queueActivated ? 'Active' : 'Inactive'}\n                                </Button>}\n                                <Popover visible={currTourStep === 0 && tourVisible} placement={isMobile ? 'bottom' : 'left'} content={tourSteps[0].content} title={tourSteps[0].title}>\n                                    <CopyToClipboard \n                                        text={`${currUrl}/queue/${userId}`}\n                                        onCopy={() => showCopyNotification()}\n                                    >\n                                        <Button shape='round' ghost>Copy Link</Button>\n                                    </CopyToClipboard>\n                                </Popover>\n                                <Button \n                                    ghost \n                                    icon={<MenuOutlined />} \n                                    style={isMobile ? { border: 'none', position: 'fixed', top: '0.5rem', right: '0.5rem'} : {border: 'none'}} \n                                    onClick={() => setMenuVisible(!menuVisible)} \n                                />\n                            </div>\n                            {turnOnCodeFeatureEnabled ? <p className={queueActivatedText}>{queueActivated ? `Code: ${code}` : `Queue Disabled`}</p> : ''}\n                        </div>,\n                    ]}\n                />\n                {queueActivated ? <div>\n                    <Dropdown overlay={menu} trigger={'click'} onVisibleChange={visible => setDropdownVisible(visible)}>\n                        <span className={sortByText}>Sort by {dropdownVisible ? <UpOutlined /> : <DownOutlined />}</span>\n                    </Dropdown>\n                </div> : ''}\n                {queueActivated ? \n                    <Popover visible={currTourStep === 1 && tourVisible} content={tourSteps[1].content} title={tourSteps[1].title}>\n                        <Table \n                            columns={columns} \n                            dataSource={generateData()} \n                            className={requestsTable}\n                            locale={{ emptyText: 'No Requests'}}/>\n                    </Popover> : \n                    (queueActiveButtonFeatureEnabled && <p className={inactiveText}>Activate your queue by clicking the 'Inactive' button above to see requests</p>)}\n            </Spin>\n        </div>\n    )\n}\n\nexport default Home\n","/Users/gautamjethwani/Documents/songq-ui/src/GuestHome/index.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/GuestHome/GuestHome.js",["70","71"],"/Users/gautamjethwani/Documents/songq-ui/src/util.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/FooterComponent/index.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/FooterComponent/FooterComponent.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/Tour/index.js",[],["72","73"],"/Users/gautamjethwani/Documents/songq-ui/src/Tour/Tour.js",["74","75","76"],"import { Modal, Steps, Button } from 'antd'\nimport { currUrl } from '../util'\nimport { copyLink, requestsImg, modal, tourInstructions } from './Tour.module.css'\nimport { useState, useEffect } from 'react'\nimport { useCookies } from 'react-cookie'\n\nconst { Step } = Steps\n\nconst steps = [\n    {\n        index: 0,\n        title: 'Queue Link',\n        content: <div className={tourInstructions}>\n            <p>You can use the 'Copy Link' button to get a shareable link where people will be able to request tracks for your queue</p>\n            <Button onClick={e => e.preventDefault()} className={copyLink} shape='round'>Copy Link</Button>\n        </div>\n    },\n    {\n        index: 1,\n        title: 'Requests',\n        content: <div className={tourInstructions}>\n            <p>Your requests will show up here, where you can see the details about the request andhow many votes it has.</p>\n            <p>You can use the green and red buttons to approve or reject the track. On approval, the track will be added to your Spotify queue.</p>\n            <img className={requestsImg} src={`${currUrl}/requests.png`} />\n        </div>\n    },\n    {\n        index: 2,\n        title: 'Extra Actions',\n        content: <div className={tourInstructions}>\n            <p>You can perform other actions located in the menu</p>\n            <p>Enable auto accept to automatically approve any request that comes in</p>\n            <p>Use the 'Approve All' and 'Reject All' buttons to service all of your current requests</p>\n            <img src={`${currUrl}/extras-menu.png`}/>\n        </div>\n    }\n]\n\nconst Tour = props => {\n    const [cookies, setCookie] = useCookies()\n    const [currStep, setCurrStep] = useState(0)\n    const [modalVisible, setModalVisible] = useState(false)\n    const { tourShown } = cookies\n    useEffect(() => {\n        if (!tourShown) {\n            setModalVisible(true)\n        }\n        if (props.showTourClicked) {\n            props.setShowTourClicked(false)\n            setModalVisible(true)\n        }\n    })\n    const nextStep = () => {\n        if (currStep === steps.length-1) {\n            setCookie('tourShown', true)\n            setModalVisible(false)\n        } else {\n            setCurrStep(currStep + 1)\n        }\n    }\n    const previousStep = () => {\n        if (currStep > 0) {\n            setCurrStep(currStep - 1)\n        }\n    }\n    const onModalCancel = () => {\n        setModalVisible(false)\n        setCookie('tourShown', true)\n    }\n    const getFooter = () => {\n        const footer = [\n            <Button key={1} onClick={() => setModalVisible(false)}>Skip Tour</Button>, \n            <Button key={3} type='primary' onClick={() => nextStep()}>{currStep === steps.length-1 ? 'Finish' : 'Next'}</Button>\n        ]\n        if (currStep > 0) {\n            footer.push(<Button key={2} onClick={() => previousStep()}>Previous</Button>)\n        }\n        footer.sort((f1, f2) => {\n            return f1.key - f2.key\n        })\n        return footer\n    }\n    return (\n        <Modal \n            title='Intro to SongQ' \n            visible={modalVisible} \n            footer={getFooter()}\n            className={modal}\n            onCancel={() => onModalCancel()}\n        >\n            <Steps current={currStep} status='wait'>\n                {steps.map(item =>{\n                    return <Step status={currStep === item.index ? 'process' : (currStep > item.index ? 'finish' : 'wait')} key={item.title} title={item.title} />\n                })}\n            </Steps>\n            <div className='steps-content'>\n                {steps[currStep].content}\n            </div>\n        </Modal>\n    )\n}\n\nexport default Tour",{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":34,"column":17,"nodeType":"83","endLine":34,"endColumn":55},{"ruleId":"84","severity":1,"message":"85","line":121,"column":8,"nodeType":"86","endLine":121,"endColumn":24,"suggestions":"87"},{"ruleId":"84","severity":1,"message":"88","line":134,"column":9,"nodeType":"86","endLine":134,"endColumn":36,"suggestions":"89"},{"ruleId":"84","severity":1,"message":"90","line":138,"column":8,"nodeType":"86","endLine":138,"endColumn":17,"suggestions":"91"},{"ruleId":"81","severity":1,"message":"82","line":572,"column":25,"nodeType":"83","endLine":572,"endColumn":102},{"ruleId":"84","severity":1,"message":"92","line":99,"column":8,"nodeType":"86","endLine":99,"endColumn":10,"suggestions":"93"},{"ruleId":"81","severity":1,"message":"82","line":237,"column":21,"nodeType":"83","endLine":237,"endColumn":98},{"ruleId":"77","replacedBy":"94"},{"ruleId":"79","replacedBy":"95"},{"ruleId":"81","severity":1,"message":"82","line":24,"column":13,"nodeType":"83","endLine":24,"endColumn":76},{"ruleId":"81","severity":1,"message":"82","line":34,"column":13,"nodeType":"83","endLine":34,"endColumn":54},{"ruleId":"84","severity":1,"message":"96","line":44,"column":5,"nodeType":"97","endLine":44,"endColumn":14,"suggestions":"98"},"no-native-reassign",["99"],"no-negated-in-lhs",["100"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'cookies' and 'setCookie'. Either include them or remove the dependency array.","ArrayExpression",["101"],"React Hook useEffect has a missing dependency: 'menuVisible'. Either include it or remove the dependency array.",["102"],"React Hook useEffect has a missing dependency: 'sortBy'. Either include it or remove the dependency array.",["103"],"React Hook useEffect has missing dependencies: 'queueActiveButtonFeatureEnabled' and 'userId'. Either include them or remove the dependency array.",["104"],["99"],["100"],"React Hook useEffect contains a call to 'setModalVisible'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [tourShown, props] as a second argument to the useEffect Hook.","Identifier",["105"],"no-global-assign","no-unsafe-negation",{"desc":"106","fix":"107"},{"desc":"108","fix":"109"},{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},"Update the dependencies array to be: [cookies, queueActivated, setCookie]",{"range":"116","text":"117"},"Update the dependencies array to be: [currTourStep, menuVisible, tourVisible]",{"range":"118","text":"119"},"Update the dependencies array to be: [sortBy, sortKey]",{"range":"120","text":"121"},"Update the dependencies array to be: [queueActiveButtonFeatureEnabled, userId]",{"range":"122","text":"123"},"Add dependencies array: [tourShown, props]",{"range":"124","text":"125"},[3971,3987],"[cookies, queueActivated, setCookie]",[4346,4373],"[currTourStep, menuVisible, tourVisible]",[4466,4475],"[sortBy, sortKey]",[3569,3571],"[queueActiveButtonFeatureEnabled, userId]",[2020,2020],", [tourShown, props]"]