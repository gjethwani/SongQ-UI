[{"/Users/gautamjethwani/Documents/songq-ui/src/reportWebVitals.js":"1","/Users/gautamjethwani/Documents/songq-ui/src/App.js":"2","/Users/gautamjethwani/Documents/songq-ui/src/index.js":"3","/Users/gautamjethwani/Documents/songq-ui/src/Login/index.js":"4","/Users/gautamjethwani/Documents/songq-ui/src/Login/Login.js":"5","/Users/gautamjethwani/Documents/songq-ui/src/Home/index.js":"6","/Users/gautamjethwani/Documents/songq-ui/src/Home/Home.js":"7","/Users/gautamjethwani/Documents/songq-ui/src/GuestLogin/index.js":"8","/Users/gautamjethwani/Documents/songq-ui/src/GuestLogin/GuestLogin.js":"9","/Users/gautamjethwani/Documents/songq-ui/src/GuestHome/index.js":"10","/Users/gautamjethwani/Documents/songq-ui/src/GuestHome/GuestHome.js":"11","/Users/gautamjethwani/Documents/songq-ui/src/util.js":"12"},{"size":362,"mtime":1609565627382,"results":"13","hashOfConfig":"14"},{"size":966,"mtime":1609999586739,"results":"15","hashOfConfig":"14"},{"size":500,"mtime":1609565627382,"results":"16","hashOfConfig":"14"},{"size":48,"mtime":1609566008982,"results":"17","hashOfConfig":"14"},{"size":593,"mtime":1609650066022,"results":"18","hashOfConfig":"14"},{"size":45,"mtime":1609568096052,"results":"19","hashOfConfig":"14"},{"size":13337,"mtime":1609999843706,"results":"20","hashOfConfig":"14"},{"size":63,"mtime":1609614457090,"results":"21","hashOfConfig":"14"},{"size":1155,"mtime":1609821774637,"results":"22","hashOfConfig":"14"},{"size":60,"mtime":1609615551780,"results":"23","hashOfConfig":"14"},{"size":5192,"mtime":1609990648812,"results":"24","hashOfConfig":"14"},{"size":381,"mtime":1609824792576,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"a60gbr",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},"/Users/gautamjethwani/Documents/songq-ui/src/reportWebVitals.js",[],["54","55"],"/Users/gautamjethwani/Documents/songq-ui/src/App.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/index.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/Login/index.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/Login/Login.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/Home/index.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/Home/Home.js",["56","57"],"import { useEffect } from 'react'\nimport {\n    extraContainer,\n    checkButton,\n    header,\n    queueActivatedText,\n    sortByText,\n    radioButtons,\n    approveButton,\n    sortContainer,\n    serviceAllContainer\n} from './Home.module.css'\nimport { \n    PageHeader, \n    Switch, \n    Table, \n    List, \n    Button, \n    notification, \n    Radio\n} from 'antd'\nimport { CopyOutlined } from '@ant-design/icons'\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\nimport 'antd/dist/antd.css'\nimport axios from 'axios'\nimport { getURL } from '../util'\nimport { useState, useRef } from 'react'\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\"\n\nconst Home = () => {\n    const turnOnCode = false\n    const [userId, setUserId] = useState(null)\n    const [queueActivated, setQueueActivated] = useState(false)\n    const [code, setCode] = useState('')\n    const [requests, setRequests] = useState([])\n    const [userName, setUserName] = useState('')\n    const [sortKey, setSortKey] = useState('oldest')\n    const [loading, setLoading] = useState([])\n    const [autoAccept, setAutoAccept] = useState(false) \n    const requestsRef = useRef(requests)\n    const sortKeyRef = useRef(sortKey)\n    const errorHandle = err => {\n        if (err.response) {\n            if (err.response.status) {\n                if (err.response.status === 401) {\n                    window.location.href = '/login'\n                } else {\n                    notification['error']({\n                        message: 'Server Error',\n                        description: 'Please try again later'\n                    })\n                }\n            } else {\n                notification['error']({\n                    message: 'Server Error',\n                    description: 'Please try again later'\n                })\n            }\n        } else {\n            notification['error']({\n                message: 'Server Error',\n                description: 'Please try again later'\n            })\n        }\n    }\n    useEffect(() => {\n        axios.get(`${getURL()}/get-user-details`, { withCredentials: true })\n            .then(response => {\n                const { user } = response.data\n                setQueueActivated(user.queueActivated)\n                setCode(user.code)\n                setUserId(user.userId)\n                setRequests(user.requests)\n                setUserName(user.name)\n                setAutoAccept(user.autoAccept)\n            })\n            .catch(err => {\n                errorHandle(err)\n                console.log(err)\n            })\n    }, [queueActivated])\n    useEffect(() => { requestsRef.current = requests }, [requests])\n    useEffect(() => {\n        sortKeyRef.current = sortKey\n        sortBy(sortKey) \n    }, [sortKey])\n    useEffect(() => {\n        axios.post(`${getURL()}/can-create-ws-connection`, {}, { withCredentials: true })\n            .then(response => {\n                const { id } = response.data\n                const client = new W3CWebSocket(`ws://${window.location.hostname === 'localhost' ? `localhost:5000` : 'api.songq.io'}/connect?id=${id}`)\n                client.onmessage = message => {\n                    const { data } = message\n                    console.log(data)\n                    if (data.substring(0, 12) === 'new-request:') {\n                        const newRequest = JSON.parse(data.substring(12, data.length))\n                        setRequests([...requestsRef.current, newRequest])\n                        sortBy(sortKeyRef.current)\n                    } else if (data.substring(0, 12) === 'aew-request:') {\n                        const newRequest = JSON.parse(data.substring(12, data.length))\n                        notification['success']({\n                            message: 'Succesfully auto queued',\n                            description: `${newRequest.songName} by ${newRequest.artists} succesfully auto queued!`\n                        })\n                    }\n                }\n            })\n            .catch(err => {\n                console.log(err)\n            })\n        \n    }, [])\n    const onCheckedButtonChange = activated => {\n        axios.patch(`${getURL()}/change-queue-activation`, { userId, activated }, { withCredentials: true })\n            .then(() => {\n                setQueueActivated(activated)\n            })\n            .catch(err => {\n                errorHandle(err)\n                console.log(err.response)\n            })\n    }\n    const generateData = () => {\n        const result = []\n        let i = 1\n        requests.forEach(r => {\n            result.push({\n                key: `${i}`,\n                track: {\n                    songName: r.songName,\n                    albumArt: r.albumArt,\n                    artists: r.artists\n                },\n                approveOrReject: r._id\n            })\n            i++\n        })\n        return result\n    }\n    const approveReject = (requestId, accepted) => {\n        const elementId = `${requestId}_${accepted ? 'approve' : 'rejected' }`\n        loading.push(elementId)\n        setLoading([...loading])\n        axios.post(`${getURL()}/service-request`, { requestId, accepted }, { withCredentials: true })\n            .then(() => {\n                for (let i = 0; i < requests.length; i++) {\n                    const r = requests[i]\n                    if (r._id === requestId) {\n                        requests.splice(i, 1)\n                        setRequests([...requests])\n                    }\n                }\n            })\n            .catch((err) => {\n                if (err.response) {\n                    if (err.response.data) {\n                        if (err.response.data.err && err.response.data.err === 'no queue') {\n                            notification['error']({\n                                message: 'No queue found',\n                                description: 'Please make sure your queue is active'\n                            })\n                        } else {\n                            errorHandle(err)\n                        }\n                    } else {\n                        errorHandle(err)\n                    }\n                } else {\n                    errorHandle(err)\n                }\n                console.log(err.response)\n            })\n            .finally(() => {\n                loading.splice(elementId, 1)\n                setLoading([...loading])\n            })\n    }\n    const wait = (ms) => {\n        const start = Date.now()\n        let now = start\n        while (now - start < ms) {\n          now = Date.now()\n        }\n    }\n    const approveRejectAll = accepted => {\n        requests.forEach(r => {\n            approveReject(r._id, accepted)\n            wait(250)\n        })\n    }\n    const sortAlphabetically = (e1, e2, key) => {\n        if(e1[key].toLowerCase() < e2[key].toLowerCase()) { return -1 }\n        if(e1[key].toLowerCase() > e2[key].toLowerCase()) { return 1 }\n        return 0\n    }\n    const sortDate = (e1, e2, key) => {\n        return new Date(e1[key]) - new Date(e2[key])\n    }\n    const sortBy = sortKey => {\n        let sortComparator\n        switch (sortKey) {\n            case 'newest':\n                sortComparator = (r1, r2) => {\n                    return sortDate(r2, r1, 'createdAt')\n                }\n                break\n            case 'oldest':\n                sortComparator = (r1, r2) => {\n                    return sortDate(r1, r2, 'createdAt')\n                }\n                break\n            case 'title':\n                sortComparator = (r1, r2) => {\n                    return sortAlphabetically(r1, r2, 'songName')\n                }\n                break\n            case 'artists':\n                sortComparator = (r1, r2) => {\n                    return sortAlphabetically(r1, r2, 'artists')\n                }\n                break\n            default:\n                sortComparator = () => 0\n        }\n        const newRequests = requestsRef.current.sort(sortComparator)\n        setRequests(() => [...newRequests])\n    }\n    const showCopyNotification = () => {\n        notification['success']({\n            message: 'Copied Succesfully',\n            description: 'Link copied to clipboard'\n        })\n    }\n    const onAutoAcceptChange = autoAcceptNew => {\n        axios.post(`${getURL()}/change-auto-accept`, { autoAccept: autoAcceptNew }, { withCredentials: true })\n            .then(() => {\n                setAutoAccept(autoAcceptNew)\n                if (autoAcceptNew) {\n                    approveRejectAll(true)\n                }\n            })\n            .catch(err => {\n                if (err.response) {\n                    if (err.response.data) {\n                        if (err.response.data.err) {\n                            if (err.response.data.err === 'queue inactive') {\n                                notification['error']({\n                                    message: 'Please open Spotify',\n                                    description: 'Cannot activate auto accept if no player is active'\n                                })\n                            }\n                        }\n                    }\n                }\n                console.log(err)\n            })\n    }\n    const columns = [\n        {\n            title: 'Track',\n            dataIndex: 'track',\n            key: 'track',\n            width: '70%',\n            render: track => (\n                <List.Item>\n                    <List.Item.Meta \n                        avatar={<img alt='album art' src={track.albumArt} style={{ width: '64px' }}/>}\n                        title={track.songName}\n                        description={track.artists}\n                    />\n                </List.Item>\n            ),\n        },\n        {\n            title: 'Approve Or Reject',\n            dataIndex: 'approveOrReject',\n            key: 'approveOrReject',\n            render: requestId => (\n                <div>\n                    <Button \n                        className={approveButton} \n                        onClick={() => approveReject(requestId, true)}\n                        id={`${requestId}_approve`}\n                        loading={loading.includes(`${requestId}_approve`)}\n                    >\n                        Approve\n                    </Button>\n                    <Button \n                        danger \n                        onClick={() => approveReject(requestId, false)}\n                        id={`${requestId}_reject`}\n                        loading={loading.includes(`${requestId}_reject`)}\n                    >\n                        Reject\n                    </Button>\n                </div>\n            )\n        }\n    ]\n    return (\n        <div>\n            <PageHeader\n                title={(userName !== '' && userName !== undefined) ? `Welcome, ${userName}!` : `Welcome!`}\n                className={header}\n                extra={[\n                    <div className={extraContainer}>\n                        <CopyToClipboard \n                            text={`${window.location.protocol}//${window.location.hostname}${window.location.hostname === 'localhost' ? `:${window.location.port}` : ''}/queue/${userId}`}\n                            onCopy={() => showCopyNotification()}\n                        >\n                            <Button shape='round' ghost icon={<CopyOutlined />}>Copy Queue Link to Clipboard</Button>\n                        </CopyToClipboard>\n                        {turnOnCode ? <p className={queueActivatedText}>{queueActivated ? `Code: ${code}` : `Queue Disabled`}</p> : ''}\n                        Queue Active:\n                        <Switch \n                            checked={queueActivated} \n                            className={checkButton} \n                            onChange={onCheckedButtonChange} \n                        />\n                        Auto Accept:\n                        <Switch\n                            checked={autoAccept}\n                            onChange={onAutoAcceptChange}\n                        />\n                    </div>\n                ]}\n            />\n            <div className={sortContainer}>\n                <span className={sortByText}>Sort By:</span>\n                <Radio.Group value={sortKey} onChange={e => setSortKey(e.target.value)} className={radioButtons}>\n                <Radio.Button value='oldest'>Oldest</Radio.Button>\n                    <Radio.Button value='newest'>Newest</Radio.Button>\n                    <Radio.Button value='title'>Title</Radio.Button>\n                    <Radio.Button value='artists'>Artists</Radio.Button>\n                </Radio.Group>\n            </div>\n            <div className={serviceAllContainer}>\n                <Button \n                    className={approveButton} \n                    onClick={() => approveRejectAll(true)}\n                    loading={loading.includes('approve_all')}\n                >\n                    Approve All\n                </Button>\n                <Button \n                    danger \n                    onClick={() => approveRejectAll(false)}\n                    loading={loading.includes('reject_all')}\n                >\n                    Reject All\n                </Button>\n            </div>\n            \n            <Table columns={columns} dataSource={generateData()} />\n        </div>\n    )\n}\n\nexport default Home\n","/Users/gautamjethwani/Documents/songq-ui/src/GuestLogin/index.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/GuestLogin/GuestLogin.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/GuestHome/index.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/GuestHome/GuestHome.js",["58"],"import { PageHeader, Card, Button, notification } from 'antd'\nimport Input from 'muicss/lib/react/input'\nimport { header, trackContainer, track, cardExtras, searchBox, inactive } from './GuestHome.module.css'\nimport { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport axios from 'axios'\nimport { CheckCircleTwoTone } from '@ant-design/icons'\nimport { getURL } from '../util'\nimport 'antd/dist/antd.css'\nimport 'muicss/dist/css/mui.min.css'\n\nconst joinArtists = artistsRaw => {\n    let result = ''\n    for (let i = 0; i < artistsRaw.length; i++) {\n        result += artistsRaw[i].name\n        if (i < artistsRaw.length - 1) {\n            result += ', '\n        }\n    }\n    return result\n}\n\nconst GuestHome = () => {\n    const [tracks, setTracks] = useState([])\n    const [userName, setUserName]  = useState('')\n    const [queueActivated, setQueueActivated] = useState(false)\n    const [requested, setRequested] = useState([])\n    const { userId } = useParams()\n    const albumArtIndex = 0\n    useEffect(() => {\n        axios.post(`${getURL()}/is-queue-active`, { userId  }, { withCredentials: true })\n            .then(response => {\n                const { queueActivated } = response.data\n                setQueueActivated(queueActivated)\n            })\n            .catch(err => {\n                notification['error']({\n                    message: 'Server Error',\n                    description: 'Cannot connect to server'\n                })\n                console.log(err)\n            })\n        axios.post(`${getURL()}/guest-login`, {}, { withCredentials: true })\n            .catch(err => {\n                notification['error']({\n                    message: 'Server Error',\n                    description: 'Cannot connect to Spotify'\n                })\n                console.log(err)\n            })\n        axios.get(`${getURL()}/get-user-name?userId=${userId}`)\n            .then(response => {\n                const { name } = response.data\n                if (name) {\n                    setUserName(name)\n                }\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    }, [])\n    const onSearchChanged = query => {\n        axios.post(`${getURL()}/search-songs`, { q: query}, { withCredentials: true })\n            .then(response => {\n                const { items } = response.data.results.tracks\n                setTracks(items)\n            })\n            .catch(err => {\n                notification['error']({\n                    message: 'Could Not Search',\n                    description: 'Error searching for tracks'\n                })\n                console.log(err)\n            })\n    }\n    const makeRequest = track => {\n        axios.post(`${getURL()}/make-request`, {\n            userId,\n            songId: track.id,\n            songName: track.name,\n            artists: joinArtists(track.artists),\n            album: track.album.name,\n            albumArt: track.album.images[albumArtIndex].url\n        }, {\n            withCredentials: true\n        })\n        .then(() => {\n            requested.push(track.id)\n            setRequested([...requested])\n        })\n        .catch(err => {\n            notification['error']({\n                message: 'Could not make request',\n                description: 'Error making request'\n            })\n            console.log(err)\n        })\n    }\n    return (\n        <div>\n            <PageHeader\n                title={userName !== '' ? `Welcome to ${userName}'s queue!` : `Welcome to the queue!`}\n                className={header}\n            />\n            {!queueActivated && <h3 className={inactive}>Queue is not active</h3>}\n            {queueActivated && \n            <div>\n                <Input\n                    label='Search for songs'\n                    onChange={e => onSearchChanged(e.target.value)}\n                    className={searchBox}\n                    floatingLabel\n                />\n                <div className={trackContainer}>\n                    {\n                        tracks.map(t => \n                            <Card \n                                hoverable\n                                className={track}\n                                key={t.id}\n                                actions={\n                                    requested.includes(t.id) ? \n                                        [<CheckCircleTwoTone className={cardExtras} twoToneColor=\"#52c41a\"/>] :\n                                        [<Button className={cardExtras} style={{ marginBottom: '1rem', marginTop: '1rem'}} onClick={() => makeRequest(t)}>Request</Button>]\n                                }\n                                cover={<img alt=\"albumArt\" src={t.album.images[albumArtIndex].url} />}\n                            >\n                                <Card.Meta \n                                    title={t.name}\n                                    description={joinArtists(t.artists)}\n                                />\n                            </Card>\n                        )\n                    }\n                </div>\n            </div>}\n        </div>\n    )\n}\n\n\n\nexport default GuestHome","/Users/gautamjethwani/Documents/songq-ui/src/util.js",[],["59","60"],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":86,"column":8,"nodeType":"67","endLine":86,"endColumn":17,"suggestions":"68"},{"ruleId":"65","severity":1,"message":"66","line":112,"column":8,"nodeType":"67","endLine":112,"endColumn":10,"suggestions":"69"},{"ruleId":"65","severity":1,"message":"70","line":61,"column":8,"nodeType":"67","endLine":61,"endColumn":10,"suggestions":"71"},{"ruleId":"61","replacedBy":"72"},{"ruleId":"63","replacedBy":"73"},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'sortBy'. Either include it or remove the dependency array.","ArrayExpression",["76"],["77"],"React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.",["78"],["74"],["75"],"no-global-assign","no-unsafe-negation",{"desc":"79","fix":"80"},{"desc":"81","fix":"82"},{"desc":"83","fix":"84"},"Update the dependencies array to be: [sortBy, sortKey]",{"range":"85","text":"86"},"Update the dependencies array to be: [sortBy]",{"range":"87","text":"88"},"Update the dependencies array to be: [userId]",{"range":"89","text":"90"},[2732,2741],"[sortBy, sortKey]",[4062,4064],"[sortBy]",[2174,2176],"[userId]"]