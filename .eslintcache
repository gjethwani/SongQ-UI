[{"/Users/gautamjethwani/Documents/songq-ui/src/reportWebVitals.js":"1","/Users/gautamjethwani/Documents/songq-ui/src/App.js":"2","/Users/gautamjethwani/Documents/songq-ui/src/index.js":"3","/Users/gautamjethwani/Documents/songq-ui/src/Home/index.js":"4","/Users/gautamjethwani/Documents/songq-ui/src/Home/Home.js":"5","/Users/gautamjethwani/Documents/songq-ui/src/GuestHome/index.js":"6","/Users/gautamjethwani/Documents/songq-ui/src/GuestHome/GuestHome.js":"7","/Users/gautamjethwani/Documents/songq-ui/src/util.js":"8","/Users/gautamjethwani/Documents/songq-ui/src/Feedback/index.js":"9","/Users/gautamjethwani/Documents/songq-ui/src/Feedback/Feedback.js":"10","/Users/gautamjethwani/Documents/songq-ui/src/FooterComponent/FooterComponent.js":"11","/Users/gautamjethwani/Documents/songq-ui/src/FooterComponent/index.js":"12"},{"size":362,"mtime":1609565627382,"results":"13","hashOfConfig":"14"},{"size":905,"mtime":1613977172638,"results":"15","hashOfConfig":"14"},{"size":672,"mtime":1614749131690,"results":"16","hashOfConfig":"14"},{"size":45,"mtime":1609568096052,"results":"17","hashOfConfig":"14"},{"size":27545,"mtime":1614742411210,"results":"18","hashOfConfig":"14"},{"size":60,"mtime":1609615551780,"results":"19","hashOfConfig":"14"},{"size":8559,"mtime":1614741878353,"results":"20","hashOfConfig":"14"},{"size":680,"mtime":1614741883174,"results":"21","hashOfConfig":"14"},{"size":57,"mtime":1613442668012,"results":"22","hashOfConfig":"14"},{"size":1577,"mtime":1614472278736,"results":"23","hashOfConfig":"14"},{"size":1266,"mtime":1614574448463,"results":"24","hashOfConfig":"14"},{"size":78,"mtime":1610357099679,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"3t1696",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"28"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"28"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"28"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/Users/gautamjethwani/Documents/songq-ui/src/reportWebVitals.js",[],["54","55"],"/Users/gautamjethwani/Documents/songq-ui/src/App.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/index.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/Home/index.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/Home/Home.js",["56","57","58","59"],"import { useEffect } from 'react'\nimport {\n    header,\n    queueActivatedText,\n    approveButton,\n    rejectButton,\n    albumArt,\n    menuItem,\n    requestsTable,\n    sortByText,\n    logo,\n    welcomeContainer,\n    welcomeText,\n    approveButtonCurved,\n    recommendButton\n} from './Home.module.css'\nimport Feedback from '../Feedback'\nimport { isMobile } from 'react-device-detect'\nimport { \n    PageHeader, \n    Switch, \n    Table, \n    List, \n    Button, \n    notification, \n    Drawer,\n    Dropdown,\n    Menu,\n    Spin,\n    Avatar,\n    Popover,\n    Tag\n} from 'antd'\nimport { \n    CheckOutlined, \n    CloseOutlined, \n    MenuOutlined,\n    DownOutlined,\n    UpOutlined,\n    LoadingOutlined,\n    UserOutlined\n} from '@ant-design/icons'\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\nimport 'antd/dist/antd.css'\nimport axios from 'axios'\nimport { getURL, logoUrl, featureFlags, currUrl } from '../util'\nimport { useState, useRef } from 'react'\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\"\nimport { useCookies } from 'react-cookie'\nimport FooterComponent from '../FooterComponent'\n\nconst Home = () => {\n    const { turnOnCodeFeatureEnabled } = featureFlags\n    const [userId, setUserId] = useState(null)\n    const [code, setCode] = useState('')\n    const [requests, setRequests] = useState([])\n    const [userName, setUserName] = useState('')\n    const [sortKey, setSortKey] = useState('oldest')\n    const [loading, setLoading] = useState([])\n    const [pageLoading, setPageLoading] = useState(true)\n    const [autoAcceptLoading, setAutoAcceptLoading] = useState(false)\n    const [approveAllLoading, setApproveAllLoading] = useState(false)\n    const [rejectAllLoading, setRejectAllLoading] = useState(false)\n    const [autoAccept, setAutoAccept] = useState(false)\n    const [menuVisible, setMenuVisible] = useState(false)\n    const [dropdownVisible, setDropdownVisible] = useState(false)\n    const [profilePicture, setProfilePicture] = useState('')\n    const [cookies, setCookie] = useCookies()\n    const [currTourStep, setCurrTourStep] = useState(0)\n    const [tourVisible, setTourVisible] = useState(false)\n    const [recommendLoading, setRecommendLoading] = useState(false)\n    const [feedbackVisible, setFeedbackVisible] = useState(false)\n    const [initialRender] = useState(false)\n    const requestsRef = useRef(requests)\n    const sortKeyRef = useRef(sortKey)\n    const errorHandle = err => {\n        if (err.response) {\n            if (err.response.status) {\n                if (err.response.status === 401) {\n                    window.location.href = '/'\n                } else {\n                    notification['error']({\n                        message: 'Server Error',\n                        description: 'Please try again later'\n                    })\n                }\n            } else {\n                notification['error']({\n                    message: 'Server Error',\n                    description: 'Please try again later'\n                })\n            }\n        } else {\n            notification['error']({\n                message: 'Server Error',\n                description: 'Please try again later'\n            })\n        }\n    }\n    useEffect(() => {\n        setPageLoading(true)\n        document.title = 'Welcome to SongQ!'\n        axios.get(`${getURL()}/get-user-details`, { withCredentials: true })\n            .then(response => {\n                const { user } = response.data\n                setCode(user.code)\n                setUserId(user.userId)\n                setRequests(user.requests)\n                setUserName(user.name)\n                setAutoAccept(user.autoAccept)\n                setProfilePicture(user.profilePicture)\n                if (autoAccept) {\n                    approveRejectAll(true)\n                }\n                const { tourShown } = cookies\n                if (!tourShown) {\n                    setTourVisible(true)\n                    setCookie('tourShown', true)\n                }\n            })\n            .catch(err => {\n                errorHandle(err)\n                console.log(err)\n            })\n            .finally(() => {\n                setPageLoading(false)\n            })\n\n        axios.post(`${getURL()}/can-create-ws-connection`, {}, { withCredentials: true })\n            .then(response => {\n                const { id } = response.data\n                const client = new W3CWebSocket(\n                    `${window.location.protocol === 'https:' ? 'wss:' : 'ws:'}//${window.location.hostname === 'localhost' ? `localhost:5000` : 'api.songq.io'}/connect?id=${id}`\n                )\n                client.onmessage = message => {\n                    const { data } = message\n                    if (data.substring(0, 12) === 'new-request:') {\n                        const newRequest = JSON.parse(data.substring(12, data.length))\n                        axios.get(`${getURL()}/get-requests`, { withCredentials: true })\n                            .then(response => {\n                                const { requests } = response.data\n                                setRequests(formatRequests(requests).sort(getSortComparator(sortKeyRef.current)))\n                            })\n                            .catch(err => {\n                                console.log(err)\n                                setRequests(formatRequests([...requestsRef.current, newRequest]).sort(getSortComparator(sortKeyRef.current)))\n                            })\n                    } else if (data.substring(0, 12) === 'aew-request:') {\n                        const newRequest = JSON.parse(data.substring(12, data.length))\n                        notification['success']({\n                            message: 'Succesfully auto queued',\n                            description: `${newRequest.songName} by ${newRequest.artists} was succesfully queued!`\n                        })                    \n                    }\n                    \n                }\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    }, [initialRender])\n    useEffect(() => { requestsRef.current = requests }, [requests])\n    useEffect(() => { \n        if (currTourStep === 2) {\n            setMenuVisible(true)\n        } else {\n            if (menuVisible) {\n                setMenuVisible(false)\n            }\n        }\n        if (tourVisible === false) {\n            setMenuVisible(false)\n        }\n    } , [currTourStep, tourVisible])\n    useEffect(() => {\n        sortKeyRef.current = sortKey\n        sortBy(sortKey) \n    }, [sortKey])\n    // useEffect(() => {\n        // axios.post(`${getURL()}/can-create-ws-connection`, {}, { withCredentials: true })\n        //     .then(response => {\n        //         const { id } = response.data\n        //         const client = new W3CWebSocket(\n        //             `${window.location.protocol === 'https:' ? 'wss:' : 'ws:'}//${window.location.hostname === 'localhost' ? `localhost:5000` : 'api.songq.io'}/connect?id=${id}`\n        //         )\n        //         client.onmessage = message => {\n        //             const { data } = message\n        //             if (data.substring(0, 12) === 'new-request:') {\n        //                 const newRequest = JSON.parse(data.substring(12, data.length))\n        //                 axios.get(`${getURL()}/get-requests`, { withCredentials: true })\n        //                     .then(response => {\n        //                         const { requests } = response.data\n        //                         setRequests(formatRequests(requests).sort(getSortComparator(sortKeyRef.current)))\n        //                     })\n        //                     .catch(err => {\n        //                         console.log(err)\n        //                         setRequests(formatRequests([...requestsRef.current, newRequest]).sort(getSortComparator(sortKeyRef.current)))\n        //                     })\n        //             } else if (data.substring(0, 12) === 'aew-request:') {\n        //                 const newRequest = JSON.parse(data.substring(12, data.length))\n        //                 notification['success']({\n        //                     message: 'Succesfully auto queued',\n        //                     description: `${newRequest.songName} by ${newRequest.artists} was succesfully queued!`\n        //                 })                    \n        //             }\n                    \n        //         }\n        //     })\n        //     .catch(err => {\n        //         console.log(err)\n        //     })\n        \n    // })\n    const nextTourStep = () => {\n        if (currTourStep === tourSteps.length-1) {\n            setCookie('tourShown', true)\n            setTourVisible(false)\n        } else {\n            setCurrTourStep(currTourStep + 1)\n        }\n    }\n    const previousTourStep = () => {\n        if (currTourStep > 0) {\n            setCurrTourStep(currTourStep - 1)\n        }\n    }\n    const formatRequests = requests => {\n        const formatted = []\n        requests.forEach(request => {\n            if (formatted.length === 0) {\n                formatted.push({\n                    ...request,\n                    votes: request.votes ? request.votes : 1\n                })\n            } else {\n                let found = false\n                for (let i = 0; i < formatted.length; i++) {\n                    if (formatted[i].songId === request.songId) {\n                        formatted[i].votes += 1\n                        found = true\n                        break\n                    }\n                }\n                if (!found) {\n                    formatted.push({\n                        ...request,\n                        votes: request.votes ? request.votes : 1\n                    })\n                }\n            }\n        })\n        return formatted\n    }\n    const generateData = () => {\n        const result = []\n        let i = 1\n        const formattedRequests = formatRequests(requests)\n        formattedRequests.forEach(r => {\n            result.push({\n                key: `${i}`,\n                track: {\n                    songName: r.songName,\n                    albumArt: r.albumArt,\n                    artists: r.artists,\n                    recommended: r.recommended\n                },\n                votes: r.votes,\n                approveOrReject: r._id\n            })\n            i++\n        })\n        return result\n    }\n    const approveReject = (requestId, accepted) => {\n        const elementId = `${requestId}_${accepted ? 'approve' : 'rejected' }`\n        loading.push(elementId)\n        setLoading([...loading])\n        axios.post(`${getURL()}/service-request`, { requestId, accepted }, { withCredentials: true })\n            .then(() => {\n                for (let i = 0; i < requests.length; i++) {\n                    const r = requests[i]\n                    if (r._id === requestId) {\n                        requests.splice(i, 1)\n                        const { songId } = r\n                        for (let j = 0; j < requests.length; j++) {\n                            if (requests[j].songId === songId) {\n                                requests.splice(j, 1)\n                            }\n                        }\n                        setRequests([...requests])\n                        break\n                    }\n                }           \n            })\n            .catch((err) => {\n                if (err.response) {\n                    if (err.response.data) {\n                        if (err.response.data.err && err.response.data.err === 'no queue') {\n                            return notification['error']({\n                                message: 'No queue found',\n                                description: 'Please make sure your queue is active'\n                            })\n                        }\n                    }\n                }\n                errorHandle(err)\n            })\n            .finally(() => {\n                loading.splice(elementId, 1)\n                setLoading([...loading])\n            })\n    }\n    const approveRejectAll = accepted => {\n        if (accepted) {\n            setApproveAllLoading(true)\n        } else {\n            setRejectAllLoading(true)\n        }\n        axios.post(`${getURL()}/service-all`, { accepted }, { withCredentials: true})\n            .then(() => {\n                setPageLoading(false)\n                setRequests([])\n            })\n            .catch(err => {\n                if (err.response) {\n                    if (err.response.data) {\n                        if (err.response.data.err) {\n                            if (err.response.data.err === 'no queue') {\n                                return notification['error']({\n                                    message: 'No queue found',\n                                    description: 'Please make sure your queue is active'\n                                })\n                            }\n                        }\n                    }\n                }\n                errorHandle(err)\n            })\n            .finally(() => {\n                if (accepted) {\n                    setApproveAllLoading(false)\n                } else {\n                    setRejectAllLoading(false)\n                }\n            })\n    }     \n    const sortAlphabetically = (e1, e2, key) => {\n        if(e1[key].toLowerCase() < e2[key].toLowerCase()) { return -1 }\n        if(e1[key].toLowerCase() > e2[key].toLowerCase()) { return 1 }\n        return 0\n    }\n    const sortDate = (e1, e2, key) => {\n        return new Date(e1[key]) - new Date(e2[key])\n    }\n    const getSortComparator = sortKey => {\n        let sortComparator\n        switch (sortKey) {\n            case 'newest':\n                sortComparator = (r1, r2) => {\n                    return sortDate(r2, r1, 'createdAt')\n                }\n                break\n            case 'oldest':\n                sortComparator = (r1, r2) => {\n                    return sortDate(r1, r2, 'createdAt')\n                }\n                break\n            case 'title':\n                sortComparator = (r1, r2) => {\n                    return sortAlphabetically(r1, r2, 'songName')\n                }\n                break\n            case 'artists':\n                sortComparator = (r1, r2) => {\n                    return sortAlphabetically(r1, r2, 'artists')\n                }\n                break\n            case 'votes':\n                sortComparator = (r1, r2) => {\n                    return r2.votes - r1.votes\n                }\n                break\n            default:\n                sortComparator = () => 0\n        }\n        return sortComparator\n    }\n    const sortBy = sortKey => {\n        const sortComparator = getSortComparator(sortKey)\n        const newRequests = formatRequests(requestsRef.current).sort(sortComparator)\n        setRequests(() => [...newRequests])\n    }\n    const showCopyNotification = () => {\n        notification['success']({\n            message: 'Copied Succesfully',\n            description: 'Link copied to clipboard'\n        })\n    }\n    const onAutoAcceptChange = autoAcceptNew => {\n        setAutoAcceptLoading(true)\n        axios.post(`${getURL()}/change-auto-accept`, { autoAccept: autoAcceptNew }, { withCredentials: true })\n            .then(() => {\n                setAutoAccept(autoAcceptNew)\n                if (autoAcceptNew) {\n                    approveRejectAll(true)\n                }\n            })\n            .catch(err => {\n                if (err.response) {\n                    if (err.response.data) {\n                        if (err.response.data.err) {\n                            if (err.response.data.err === 'queue inactive') {\n                                notification['error']({\n                                    message: 'Please open Spotify',\n                                    description: 'Cannot activate auto accept if no player is active'\n                                })\n                            }\n                        }\n                    }\n                }\n                console.log(err)\n            })\n            .finally(() => {\n                setAutoAcceptLoading(false)\n            })\n    }\n    const getDrawerTitle = () => {\n        if (profilePicture === '' || profilePicture === undefined) {\n            return <div>\n                <Avatar icon={<UserOutlined />} />\n                <span className={welcomeText}>{(userName !== '' && userName !== undefined) ? `Welcome, ${userName}!` : `Welcome!`}</span>\n            </div>\n        } else {\n            return <div>\n                <Avatar src={profilePicture} />\n                <span className={welcomeText}>{(userName !== '' && userName !== undefined) ? `Welcome, ${userName}!` : `Welcome!`}</span>\n            </div>\n        }\n    }\n    const getRecommendation = () => {\n        setRecommendLoading(true)\n        axios.get(`${getURL()}/get-recommendation`, { withCredentials: true })\n            .then(response => {\n                const { recommendation } = response.data\n                requests.push(recommendation)\n                setRequests([...requests])\n            })\n            .catch(() => {\n                notification['error']({\n                    message: 'Unable to get recommendation',\n                    description: 'Please try again later'\n                })\n            })\n            .finally(() => {\n                setRecommendLoading(false)\n            })\n    }\n    const columns = [\n        {\n            title: 'Votes',\n            dataIndex: 'votes',\n            key: 'votes',\n            width: '10%',\n            render: votes => (\n                <p>{`${votes}`}</p>\n            )\n        },\n        {\n            title: 'Track',\n            dataIndex: 'track',\n            key: 'track',\n            width: '60%',\n            render: track => (\n                <div>\n                    {track.recommended && <Tag color='purple'>Recommended by SongQ</Tag>}\n                    <List.Item>\n                        <List.Item.Meta \n                            avatar={\n                                <img \n                                    alt='album art' \n                                    src={track.albumArt} \n                                    className={albumArt}\n                            />}\n                            title={track.songName}\n                            description={track.artists}\n                        />\n                    </List.Item>\n                </div>\n            ),\n        },\n        {\n            title: 'Accept Or Reject',\n            dataIndex: 'approveOrReject',\n            key: 'approveOrReject',\n            width: '30%',\n            render: requestId => (\n                <div style={{ 'display': 'flex' }}>\n                    <Button \n                        className={approveButton} \n                        onClick={() => approveReject(requestId, true)}\n                        id={`${requestId}_approve`}\n                        loading={loading.includes(`${requestId}_approve`)}\n                        icon={<CheckOutlined />}\n                    />\n                    <Button \n                        className={rejectButton}\n                        danger \n                        onClick={() => approveReject(requestId, false)}\n                        id={`${requestId}_reject`}\n                        loading={loading.includes(`${requestId}_reject`)}\n                        icon={<CloseOutlined />}\n                    />\n                </div>\n            )\n        }\n    ]\n    const menu = (\n        <Menu>\n            <Menu.Item onClick={() => setSortKey('oldest')}>\n                Oldest\n            </Menu.Item>\n            <Menu.Item onClick={() => setSortKey('newest')}>\n                Newest\n            </Menu.Item>\n            <Menu.Item onClick={() => setSortKey('title')}>\n                Title\n            </Menu.Item>\n            <Menu.Item onClick={() => setSortKey('artists')}>\n                Artists\n            </Menu.Item>\n            <Menu.Item onClick={() => setSortKey('votes')}>\n                Votes\n            </Menu.Item>\n        </Menu>\n    )\n    const tourSteps = [\n        {\n            index: 0,\n            title: 'Queue Link',\n            content: <div>\n                <p>Use the 'Copy Link' button to get a shareable link for people to request tracks to your queue.</p>\n                <Button onClick={() => setTourVisible(false)}>Skip Tour</Button>\n                <Button type='primary' onClick={() => nextTourStep()}>Next</Button>\n            </div>\n        },\n        {\n            index: 1,\n            title: 'Requests',\n            content: <div>\n                <p>Your requests are here. You can accept or reject them, see details about the track and votes garnered.</p>\n                <p>On approval, the track will be added to your Spotify queue.</p>\n                <Button onClick={() => setTourVisible(false)}>Skip Tour</Button>\n                <Button onClick={() => previousTourStep()}>Previous</Button>\n                <Button type='primary' onClick={() => nextTourStep()}>Next</Button>\n            </div>\n        },\n        {\n            index: 2,\n            title: 'Extra Actions',\n            content: <div>\n                <p>Use this menu to enable Auto Accept for all current and future requests.</p>\n                <p>You can use the 'Accept All' and 'Reject All' buttons to clear your current requests.</p>\n                <p>Can't think of what to play? We can recommend you something based on what you've approved.</p>\n                <Button onClick={() => previousTourStep()}>Previous</Button>\n                <Button type='primary' onClick={() => nextTourStep()}>Finish</Button>\n            </div>\n        }\n    ]\n    return (\n        <div>\n            <Spin spinning={pageLoading} indicator={<LoadingOutlined spin />}>\n                <Popover placement='rightBottom' visible={currTourStep === 2 && tourVisible} title={tourSteps[2].title} content={tourSteps[2].content}>\n                    <Drawer \n                        visible={menuVisible}\n                        title={ getDrawerTitle()}\n                        onClose={() => setMenuVisible(false)}\n                        footer={\n                        <div>\n                            <Button \n                                ghost \n                                type='primary'\n                                shape='round' \n                                style={{ marginLeft: '14px'}}\n                                onClick={() => setTourVisible(true)}\n                            >\n                                Show Me Around\n                            </Button>\n                        </div>\n                        }\n                    >\n                        <div className={menuItem}>\n                            Auto Accept:\n                            <Switch\n                                checked={autoAccept}\n                                onChange={onAutoAcceptChange}\n                                style={{ marginLeft: '5px', marginRight: '5px'}}\n                                loading={autoAcceptLoading}\n                            />\n                        </div>\n                        <div className={menuItem}>\n                            <Button\n                                className={autoAccept ? approveButtonCurved : approveButton} \n                                onClick={() => approveRejectAll(true)}\n                                loading={approveAllLoading}\n                                style={isMobile ? { padding :'4px 10px'} : {}}\n                                disabled={autoAccept}\n                            >\n                                Accept All\n                            </Button>\n                        </div>\n                        <div className={menuItem}>\n                            <Button \n                                className={rejectButton}\n                                danger \n                                onClick={() => approveRejectAll(false)}\n                                loading={rejectAllLoading}\n                                style={isMobile ? { padding :'4px 10px' } : {}}\n                                disabled={autoAccept}\n                            >\n                                Reject All\n                            </Button>\n                        </div>\n                        <div className={menuItem}>\n                            <Button\n                                onClick={() => getRecommendation()}\n                                className={recommendButton}\n                                type='primary'\n                                ghost\n                                loading={recommendLoading}\n                            >\n                                Recommend Something\n                            </Button>\n                        </div>\n                    </Drawer>\n                </Popover>\n                <PageHeader\n                    title={\n                    <div className={welcomeContainer}>\n                        <img className={logo} src={logoUrl} style={isMobile ? { width: '40%'} : {}}/>\n                    </div>}\n                    className={header}\n                    extra={[\n                        <div>\n                            <div>\n                                <Popover visible={currTourStep === 0 && tourVisible} placement={isMobile ? 'bottom' : 'left'} content={tourSteps[0].content} title={tourSteps[0].title}>\n                                    <CopyToClipboard \n                                        text={`${currUrl}/queue/${userId}`}\n                                        onCopy={() => showCopyNotification()}\n                                    >\n                                        <Button shape='round' ghost>Copy Link</Button>\n                                    </CopyToClipboard>\n                                </Popover>\n                                <Button \n                                    ghost \n                                    icon={<MenuOutlined />} \n                                    style={isMobile ? { border: 'none', position: 'fixed', top: '0.5rem', right: '0.5rem'} : {border: 'none'}} \n                                    onClick={() => setMenuVisible(!menuVisible)} \n                                />\n                            </div>\n                            {turnOnCodeFeatureEnabled ? <p className={queueActivatedText}>{`Code: ${code}`}</p> : ''}\n                        </div>,\n                    ]}\n                />\n                <div>\n                    <Dropdown overlay={menu} trigger={'click'} onVisibleChange={visible => setDropdownVisible(visible)}>\n                        <span className={sortByText}>Sort by {dropdownVisible ? <UpOutlined /> : <DownOutlined />}</span>\n                    </Dropdown>\n                </div>\n                <Popover visible={currTourStep === 1 && tourVisible} content={tourSteps[1].content} title={tourSteps[1].title}>\n                    <Table \n                        columns={columns} \n                        dataSource={generateData()} \n                        className={requestsTable}\n                        locale={{ emptyText: 'No Requests'}}/>\n                </Popover>\n            </Spin>\n            <Feedback feedbackVisible={feedbackVisible} hideFeedback={() => setFeedbackVisible(false)}/>\n            <FooterComponent transparentBackground showFeedback={() => setFeedbackVisible(true)}/>\n        </div>\n    )\n}\n\nexport default Home\n","/Users/gautamjethwani/Documents/songq-ui/src/GuestHome/index.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/GuestHome/GuestHome.js",["60","61"],"import { \n    PageHeader, \n    Button, \n    notification, \n    List, \n    Table,\n    Spin\n} from 'antd'\nimport Input from 'muicss/lib/react/input'\nimport { \n    header, \n    cardExtras, \n    searchBox, \n} from './GuestHome.module.css'\nimport { albumArt, requestsTable, welcomeContainer, logo } from '../Home/Home.module.css'\nimport { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport axios from 'axios'\nimport { CheckCircleTwoTone, PlusOutlined, LoadingOutlined } from '@ant-design/icons'\nimport { getURL, logoUrl } from '../util'\nimport { isMobile } from 'react-device-detect'\nimport 'antd/dist/antd.css'\nimport './mui.css'\nimport FooterComponent from '../FooterComponent/FooterComponent'\nimport Feedback from '../Feedback'\n\nconst joinArtists = artistsRaw => {\n    let result = ''\n    for (let i = 0; i < artistsRaw.length; i++) {\n        result += artistsRaw[i].name\n        if (i < artistsRaw.length - 1) {\n            result += ', '\n        }\n    }\n    return result\n}\n\nconst GuestHome = () => {\n    const [tracks, setTracks] = useState([])\n    const [userName, setUserName]  = useState('')\n    const [requested, setRequested] = useState([])\n    const [recentRequests, setRecentRequests] = useState([])\n    const [currQuery, setQuery] = useState('')\n    const [pageLoading, setPageLoading] = useState(true)\n    const [requestsLoading, setRequestsLoading] = useState([])\n    const [feedbackVisible, setFeedbackVisible] = useState(false)\n    const { userId } = useParams()\n    const albumArtIndex = 0\n    let CancelToken = axios.CancelToken\n    let cancel\n    useEffect(() => {\n        document.title = 'Welcome to SongQ!'\n        axios.post(`${getURL()}/guest-login`, {}, { withCredentials: true })\n            .then(() => {\n                axios.get(`${getURL()}/get-user-name?userId=${userId}`, { withCredentials: true })\n                    .then(response => {\n                        const { name } = response.data\n                        if (name) {\n                            setUserName(name)\n                        }\n                    })\n                    .catch(err => {\n                        console.log(err)\n                    })\n                axios.get(`${getURL()}/get-recently-approved?userId=${userId}`, { withCredentials: true })\n                    .then(response => {\n                        const { requests } = response.data\n                        setRecentRequests(requests)\n                    })\n                    .catch(err => {\n                        console.log(err)\n                    })\n            })\n            .catch(err => {\n                notification['error']({\n                    message: 'Server Error',\n                    description: 'Cannot connect to Spotify'\n                })\n                console.log(err)\n            })\n            .finally(() => {\n                setPageLoading(false)\n            })\n        \n    }, [])\n    const onSearchChanged = query => {\n        setQuery(query)\n        if (query === '') {\n            return\n        }\n        if (cancel !== undefined) {\n            cancel()\n        }\n        setPageLoading(true)\n        axios.post(`${getURL()}/search-songs`, { q: query}, { \n            withCredentials: true,\n            cancelToken: new CancelToken(c => {\n                cancel = c\n            })\n        })\n            .then(response => {\n                const { items } = response.data.results.tracks\n                setTracks(items)\n            })\n            .catch(err => {\n                console.log(err)\n            })\n            .finally(() => {\n                setPageLoading(false)\n            })\n    }\n    const makeRequest = track => {\n        requestsLoading.push(track.id)\n        setRequestsLoading([...requestsLoading])\n        axios.post(`${getURL()}/make-request`, {\n            userId,\n            songId: track.id,\n            songName: track.songName,\n            artists: track.artists,\n            album: track.album,\n            albumArt: track.albumArt\n        }, {\n            withCredentials: true\n        })\n        .then(() => {\n            requested.push(track.id)\n            setRequested([...requested])\n        })\n        .catch(err => {\n            notification['error']({\n                message: 'Could not make request',\n                description: 'Error making request'\n            })\n            console.log(err)\n        })\n        .finally(() => {\n            requestsLoading.splice(track.id, 1)\n            setRequestsLoading([...requestsLoading])\n        })\n    }\n    const generateData = () => {\n        const toReturn = []\n        if (currQuery === '') {\n            for (let i = 0; i < recentRequests.length; i++) {\n                const r = recentRequests[i]\n                toReturn.push({\n                    key: `${i}`,\n                    track: {\n                        songName: r.songName,\n                        albumArt: r.albumArt,\n                        artists: r.artists\n                    }\n                })\n            }\n        } else {\n            for (let i = 0; i < tracks.length; i++) {\n                const t = tracks[i]\n                const songInfo = {\n                    songName: t.name,\n                    albumArt: t.album.images[albumArtIndex].url,\n                    artists: joinArtists(t.artists)\n                }\n                songInfo.id = t.id\n                toReturn.push({\n                    key: `${i}`,\n                    track: songInfo,\n                    request: {\n                        id: t.id,\n                        album: t.album.name,\n                        ...songInfo\n                    }\n                })\n            }\n        }\n        return toReturn\n    }\n    const columns = [\n        {\n            title: 'Track',\n            dataIndex: 'track',\n            key: 'track',\n            width: '70%',\n            render: track => (\n                <List.Item>\n                    <List.Item.Meta \n                        avatar={\n                            <img \n                                alt='album art' \n                                src={track.albumArt} \n                                className={albumArt}\n                        />}\n                        title={track.songName}\n                        description={track.artists}\n                    />\n                </List.Item>\n            ),\n        }\n    ]\n    if (currQuery !== '') {\n        columns.push({\n            title: 'Request',\n            dataIndex: 'request',\n            key: 'request',\n            width: '30%',\n            render: track => (\n                <Button \n                    className={cardExtras} \n                    style={{ marginBottom: '1rem', marginTop: '1rem', border: 'none'}} \n                    onClick={() => makeRequest(track)}\n                    disabled={requested.includes(track.id)}\n                    loading={requestsLoading.includes(track.id)}\n                >\n                    {requestsLoading.includes(track.id) ? '' : (requested.includes(track.id) ? <CheckCircleTwoTone className={cardExtras} twoToneColor=\"#52c41a\"/> : <PlusOutlined />)}\n                </Button>\n            )\n        })\n    }\n    return (\n        <div>\n            <PageHeader \n                title={\n                <div className={welcomeContainer}>\n                    <img className={logo} src={logoUrl} style={isMobile ? { width: '40%'} : {}}/>\n                    <span>{userName !== '' ? `${userName}'s queue` : `Welcome to the queue!`}</span>\n                </div>}\n                className={header}\n            />\n            <Spin spinning={pageLoading} indicator={<LoadingOutlined spin />}>\n                <div>\n                    <Input\n                        label='Search for songs'\n                        onChange={e => onSearchChanged(e.target.value)}\n                        className={searchBox}\n                        floatingLabel\n                    />\n                    <h2 style={{ textAlign: 'center', fontVariant: 'tabular-nums', fontWeight: 'bold'}}>\n                        {currQuery === '' ? 'Recently Played' : 'Search Results'}\n                    </h2>\n                    <Table columns={columns} dataSource={generateData()} className={requestsTable} />\n                </div>\n            </Spin>\n            <Feedback feedbackVisible={feedbackVisible} hideFeedback={() => setFeedbackVisible(false)}/>\n            <FooterComponent transparentBackground showFeedback={() => setFeedbackVisible(true)}/>\n        </div>\n    )\n}\n\n\n\nexport default GuestHome","/Users/gautamjethwani/Documents/songq-ui/src/util.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/Feedback/index.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/Feedback/Feedback.js",[],"/Users/gautamjethwani/Documents/songq-ui/src/FooterComponent/FooterComponent.js",["62"],"import { Layout } from 'antd'\nimport { \n    footer,\n    footerElem\n} from './Footer.module.css'\n\nconst { Footer } = Layout\n\nconst FooterComponent = props => {\n    const footerStyle = props.transparentBackground ? { background: 'none' } : {}\n    const aStyle = props.transparentBackground ? { color: 'black' } : {}\n    return(\n        <Footer className={footer} style={footerStyle}>\n            <a \n                href='/terms-and-conditions.html' \n                target='_blank' \n                className={footerElem} \n                style={{ \n                    marginLeft: '1rem',\n                    ...aStyle\n                }}\n            >\n                Terms and Conditions\n            </a>\n            <a \n                href='/privacy-policy.html' \n                target='_blank' \n                className={footerElem}\n                style={{ \n                    marginLeft: '1rem',\n                    ...aStyle\n                }}\n            >\n                Privacy Policy\n            </a>\n            <a\n                onClick={() => props.showFeedback()}\n                className={footerElem}\n                style={aStyle}\n            >\n                Feedback\n            </a>\n        </Footer>\n    )\n}\n\nexport default FooterComponent","/Users/gautamjethwani/Documents/songq-ui/src/FooterComponent/index.js",[],{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","severity":1,"message":"68","line":161,"column":8,"nodeType":"69","endLine":161,"endColumn":23,"suggestions":"70"},{"ruleId":"67","severity":1,"message":"71","line":174,"column":9,"nodeType":"69","endLine":174,"endColumn":36,"suggestions":"72"},{"ruleId":"67","severity":1,"message":"73","line":178,"column":8,"nodeType":"69","endLine":178,"endColumn":17,"suggestions":"74"},{"ruleId":"75","severity":1,"message":"76","line":639,"column":25,"nodeType":"77","endLine":639,"endColumn":102},{"ruleId":"67","severity":1,"message":"78","line":85,"column":8,"nodeType":"69","endLine":85,"endColumn":10,"suggestions":"79"},{"ruleId":"75","severity":1,"message":"76","line":223,"column":21,"nodeType":"77","endLine":223,"endColumn":98},{"ruleId":"80","severity":1,"message":"81","line":36,"column":13,"nodeType":"77","endLine":40,"endColumn":14},"no-native-reassign",["82"],"no-negated-in-lhs",["83"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'approveRejectAll', 'autoAccept', 'cookies', 'getSortComparator', and 'setCookie'. Either include them or remove the dependency array.","ArrayExpression",["84"],"React Hook useEffect has a missing dependency: 'menuVisible'. Either include it or remove the dependency array.",["85"],"React Hook useEffect has a missing dependency: 'sortBy'. Either include it or remove the dependency array.",["86"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.",["87"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation",{"desc":"88","fix":"89"},{"desc":"90","fix":"91"},{"desc":"92","fix":"93"},{"desc":"94","fix":"95"},"Update the dependencies array to be: [approveRejectAll, autoAccept, cookies, getSortComparator, initialRender, setCookie]",{"range":"96","text":"97"},"Update the dependencies array to be: [currTourStep, menuVisible, tourVisible]",{"range":"98","text":"99"},"Update the dependencies array to be: [sortBy, sortKey]",{"range":"100","text":"101"},"Update the dependencies array to be: [userId]",{"range":"102","text":"103"},[6056,6071],"[approveRejectAll, autoAccept, cookies, getSortComparator, initialRender, setCookie]",[6430,6457],"[currTourStep, menuVisible, tourVisible]",[6550,6559],"[sortBy, sortKey]",[2925,2927],"[userId]"]