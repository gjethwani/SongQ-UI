[{"/Users/gautamjethwani/Documents/SongQ/songq-ui/src/index.js":"1","/Users/gautamjethwani/Documents/SongQ/songq-ui/src/App.js":"2","/Users/gautamjethwani/Documents/SongQ/songq-ui/src/reportWebVitals.js":"3","/Users/gautamjethwani/Documents/SongQ/songq-ui/src/Home/index.js":"4","/Users/gautamjethwani/Documents/SongQ/songq-ui/src/GuestHome/index.js":"5","/Users/gautamjethwani/Documents/SongQ/songq-ui/src/Home/Home.js":"6","/Users/gautamjethwani/Documents/SongQ/songq-ui/src/GuestHome/GuestHome.js":"7","/Users/gautamjethwani/Documents/SongQ/songq-ui/src/util.js":"8","/Users/gautamjethwani/Documents/SongQ/songq-ui/src/FooterComponent/FooterComponent.js":"9","/Users/gautamjethwani/Documents/SongQ/songq-ui/src/FooterComponent/index.js":"10","/Users/gautamjethwani/Documents/SongQ/songq-ui/src/FeedbackModal/index.js":"11","/Users/gautamjethwani/Documents/SongQ/songq-ui/src/FeedbackModal/FeedbackModal.js":"12","/Users/gautamjethwani/Documents/SongQ/songq-ui/src/FeedbackPage/index.js":"13","/Users/gautamjethwani/Documents/SongQ/songq-ui/src/FeedbackPage/FeedbackPage.js":"14"},{"size":672,"mtime":1614749131690,"results":"15","hashOfConfig":"16"},{"size":1042,"mtime":1616126341840,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1609565627382,"results":"18","hashOfConfig":"16"},{"size":45,"mtime":1609568096052,"results":"19","hashOfConfig":"16"},{"size":60,"mtime":1609615551780,"results":"20","hashOfConfig":"16"},{"size":31095,"mtime":1618846109593,"results":"21","hashOfConfig":"16"},{"size":8523,"mtime":1622187348473,"results":"22","hashOfConfig":"16"},{"size":680,"mtime":1616126094465,"results":"23","hashOfConfig":"16"},{"size":1357,"mtime":1614749897450,"results":"24","hashOfConfig":"16"},{"size":78,"mtime":1610357099679,"results":"25","hashOfConfig":"16"},{"size":72,"mtime":1616123793925,"results":"26","hashOfConfig":"16"},{"size":1587,"mtime":1616126094465,"results":"27","hashOfConfig":"16"},{"size":69,"mtime":1616126174383,"results":"28","hashOfConfig":"16"},{"size":1632,"mtime":1616126860257,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"13l9rna",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/Users/gautamjethwani/Documents/SongQ/songq-ui/src/index.js",[],["61","62"],"/Users/gautamjethwani/Documents/SongQ/songq-ui/src/App.js",[],"/Users/gautamjethwani/Documents/SongQ/songq-ui/src/reportWebVitals.js",[],"/Users/gautamjethwani/Documents/SongQ/songq-ui/src/Home/index.js",[],"/Users/gautamjethwani/Documents/SongQ/songq-ui/src/GuestHome/index.js",[],"/Users/gautamjethwani/Documents/SongQ/songq-ui/src/Home/Home.js",["63","64","65","66","67"],"import { useEffect } from 'react'\nimport {\n    header,\n    queueActivatedText,\n    approveButton,\n    rejectButton,\n    albumArt,\n    menuItem,\n    requestsTable,\n    sortByText,\n    logo,\n    welcomeContainer,\n    welcomeText,\n    approveButtonCurved,\n    recommendButton,\n    qrCodeContainer,\n    similarity\n} from './Home.module.css'\nimport FeedbackModal from '../FeedbackModal'\nimport { isMobile } from 'react-device-detect'\nimport { \n    PageHeader, \n    Switch, \n    Table, \n    List, \n    Button, \n    notification, \n    Drawer,\n    Dropdown,\n    Menu,\n    Spin,\n    Avatar,\n    Popover,\n    Tag,\n    Radio,\n    Modal\n} from 'antd'\nimport { \n    CheckOutlined, \n    CloseOutlined, \n    MenuOutlined,\n    DownOutlined,\n    UpOutlined,\n    LoadingOutlined,\n    UserOutlined,\n    LikeOutlined\n} from '@ant-design/icons'\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\nimport 'antd/dist/antd.css'\nimport axios from 'axios'\nimport { getURL, logoUrl, featureFlags, currUrl } from '../util'\nimport { useState, useRef } from 'react'\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\"\nimport { useCookies } from 'react-cookie'\nimport FooterComponent from '../FooterComponent'\nimport QRCode from 'react-qr-code'\n\nconst Home = () => {\n    const { turnOnCodeFeatureEnabled } = featureFlags\n    const [userId, setUserId] = useState(null)\n    const [code, setCode] = useState('')\n    const [requests, setRequests] = useState([])\n    const [userName, setUserName] = useState('')\n    const [sortKey, setSortKey] = useState('oldest')\n    const [loading, setLoading] = useState([])\n    const [pageLoading, setPageLoading] = useState(true)\n    const [autoAcceptLoading, setAutoAcceptLoading] = useState(false)\n    const [approveAllLoading, setApproveAllLoading] = useState(false)\n    const [rejectAllLoading, setRejectAllLoading] = useState(false)\n    const [autoAccept, setAutoAccept] = useState(false)\n    const [menuVisible, setMenuVisible] = useState(false)\n    const [dropdownVisible, setDropdownVisible] = useState(false)\n    const [profilePicture, setProfilePicture] = useState('')\n    const [cookies, setCookie] = useCookies()\n    const [currTourStep, setCurrTourStep] = useState(0)\n    const [tourVisible, setTourVisible] = useState(false)\n    const [recommendLoading, setRecommendLoading] = useState(false)\n    const [feedbackVisible, setFeedbackVisible] = useState(false)\n    const [initialRender] = useState(false)\n    const [emailPreference, setEmailPreference] = useState(\"unreadRequests\")\n    const [emailRadioValue, setEmailRadioValue] = useState(2)\n    const [emailPreferenceLoading, setEmailPreferenceLoading] = useState(false)\n    const [showQRCodeModal, setShowQRCodeModal] = useState(false)\n    const requestsRef = useRef(requests)\n    const sortKeyRef = useRef(sortKey)\n    const errorHandle = err => {\n        if (err.response) {\n            if (err.response.status) {\n                if (err.response.status === 401) {\n                    window.location.href = '/'\n                } else {\n                    notification['error']({\n                        message: 'Server Error',\n                        description: 'Please try again later'\n                    })\n                }\n            } else {\n                notification['error']({\n                    message: 'Server Error',\n                    description: 'Please try again later'\n                })\n            }\n        } else {\n            notification['error']({\n                message: 'Server Error',\n                description: 'Please try again later'\n            })\n        }\n    }\n    useEffect(() => {\n        setPageLoading(true)\n        document.title = 'Welcome to SongQ!'\n        axios.get(`${getURL()}/get-user-details`, { withCredentials: true })\n            .then(response => {\n                const { user } = response.data\n                setCode(user.code)\n                setUserId(user.userId)\n                setUserName(user.name)\n                setAutoAccept(user.autoAccept)\n                setProfilePicture(user.profilePicture)\n                setEmailPreference(user.emailPreference)\n                if (autoAccept) {\n                    approveRejectAll(true)\n                }\n                const { tourShown } = cookies\n                if (!tourShown) {\n                    setTourVisible(true)\n                    setCookie('tourShown', true)\n                }\n                if (user.emailPreference ===  \"unreadRequests\") {\n                    axios.post(`${getURL()}/change-should-send-email`,  { shouldSendEmail: true }, { withCredentials: true})\n                    setEmailRadioValue(2)\n                }\n                if (user.emailPreference === \"none\") {\n                    setEmailRadioValue(1)\n                }\n                if (user.emailPreference === \"allRequests\") {\n                    setEmailRadioValue(3)\n                }\n                if (user.requests) {\n                    user.requests.forEach(request => {\n                        let noSimilar = 0\n                        request.similar.forEach(s => {\n                            if (s.difference < 20) {\n                                noSimilar++\n                            }\n                        })\n                        request.isSimilar = request.similar[0].difference !== 0 && noSimilar >= (request.similar.length / 2)\n                    })\n                    setRequests(user.requests)\n                }\n            })\n            .catch(err => {\n                errorHandle(err)\n                console.log(err)\n            })\n            .finally(() => {\n                setPageLoading(false)\n            })\n\n        axios.post(`${getURL()}/can-create-ws-connection`, {}, { withCredentials: true })\n            .then(response => {\n                const { id } = response.data\n                const client = new W3CWebSocket(\n                    `${window.location.protocol === 'https:' ? 'wss:' : 'ws:'}//${window.location.hostname === 'localhost' ? `localhost:5000` : 'api.songq.io'}/connect?id=${id}`\n                )\n                client.onmessage = message => {\n                    const { data } = message\n                    if (data.substring(0, 12) === 'new-request:') {\n                        const newRequest = JSON.parse(data.substring(12, data.length))\n                        axios.get(`${getURL()}/get-requests`, { withCredentials: true })\n                            .then(response => {\n                                const { requests } = response.data\n                                setRequests(formatRequests(requests).sort(getSortComparator(sortKeyRef.current)))\n                            })\n                            .catch(err => {\n                                console.log(err)\n                                setRequests(formatRequests([...requestsRef.current, newRequest]).sort(getSortComparator(sortKeyRef.current)))\n                            })\n                    } else if (data.substring(0, 12) === 'aew-request:') {\n                        const newRequest = JSON.parse(data.substring(12, data.length))\n                        notification['success']({\n                            message: 'Succesfully auto queued',\n                            description: `${newRequest.songName} by ${newRequest.artists} was succesfully queued!`\n                        })                    \n                    }\n                    \n                }\n            })\n            .catch(err => {\n                console.log(err)\n            })\n    }, [initialRender])\n    useEffect(() => { requestsRef.current = requests }, [requests])\n    useEffect(() => { \n        if (currTourStep === 2) {\n            setMenuVisible(true)\n        } else {\n            if (menuVisible) {\n                setMenuVisible(false)\n            }\n        }\n        if (tourVisible === false) {\n            setMenuVisible(false)\n        }\n    } , [currTourStep, tourVisible])\n    useEffect(() => {\n        sortKeyRef.current = sortKey\n        sortBy(sortKey) \n    }, [sortKey])\n    const nextTourStep = () => {\n        if (currTourStep === tourSteps.length-1) {\n            setCookie('tourShown', true)\n            setTourVisible(false)\n        } else {\n            setCurrTourStep(currTourStep + 1)\n        }\n    }\n    const previousTourStep = () => {\n        if (currTourStep > 0) {\n            setCurrTourStep(currTourStep - 1)\n        }\n    }\n    const formatRequests = requests => {\n        const formatted = []\n        requests.forEach(request => {\n            if (formatted.length === 0) {\n                formatted.push({\n                    ...request,\n                    votes: request.votes ? request.votes : 1\n                })\n            } else {\n                let found = false\n                for (let i = 0; i < formatted.length; i++) {\n                    if (formatted[i].songId === request.songId) {\n                        formatted[i].votes += 1\n                        found = true\n                        break\n                    }\n                }\n                if (!found) {\n                    formatted.push({\n                        ...request,\n                        votes: request.votes ? request.votes : 1\n                    })\n                }\n            }\n        })\n        formatted.forEach(request => {\n            let noSimilar = 0\n            request.similar.forEach(s => {\n                if (s.difference < 20) {\n                    noSimilar++\n                }\n            })\n            request.isSimilar = request.similar[0].difference !== 0 && noSimilar >= (request.similar.length / 2)\n        })\n        return formatted\n    }\n    const generateData = () => {\n        const result = []\n        let i = 1\n        const formattedRequests = formatRequests(requests)\n        formattedRequests.forEach(r => {\n            result.push({\n                key: `${i}`,\n                track: {\n                    songName: r.songName,\n                    albumArt: r.albumArt,\n                    artists: r.artists,\n                    recommended: r.recommended,\n                    similar: r.similar,\n                    isSimilar: r.isSimilar\n                },\n                votes: r.votes,\n                approveOrReject: r._id\n            })\n            i++\n        })\n        return result\n    }\n    const approveReject = (requestId, accepted) => {\n        const elementId = `${requestId}_${accepted ? 'approve' : 'rejected' }`\n        loading.push(elementId)\n        setLoading([...loading])\n        axios.post(`${getURL()}/service-request`, { requestId, accepted }, { withCredentials: true })\n            .then(() => {\n                for (let i = 0; i < requests.length; i++) {\n                    const r = requests[i]\n                    if (r._id === requestId) {\n                        requests.splice(i, 1)\n                        const { songId } = r\n                        for (let j = 0; j < requests.length; j++) {\n                            if (requests[j].songId === songId) {\n                                requests.splice(j, 1)\n                            }\n                        }\n                        setRequests([...requests])\n                        break\n                    }\n                }           \n            })\n            .catch((err) => {\n                if (err.response) {\n                    if (err.response.data) {\n                        if (err.response.data.err && err.response.data.err === 'no queue') {\n                            return notification['error']({\n                                message: 'No queue found',\n                                description: 'Please make sure your queue is active'\n                            })\n                        }\n                    }\n                }\n                errorHandle(err)\n            })\n            .finally(() => {\n                loading.splice(elementId, 1)\n                setLoading([...loading])\n            })\n    }\n    const approveRejectAll = accepted => {\n        if (accepted) {\n            setApproveAllLoading(true)\n        } else {\n            setRejectAllLoading(true)\n        }\n        axios.post(`${getURL()}/service-all`, { accepted }, { withCredentials: true})\n            .then(() => {\n                setPageLoading(false)\n                setRequests([])\n            })\n            .catch(err => {\n                if (err.response) {\n                    if (err.response.data) {\n                        if (err.response.data.err) {\n                            if (err.response.data.err === 'no queue') {\n                                return notification['error']({\n                                    message: 'No queue found',\n                                    description: 'Please make sure your queue is active'\n                                })\n                            }\n                        }\n                    }\n                }\n                errorHandle(err)\n            })\n            .finally(() => {\n                if (accepted) {\n                    setApproveAllLoading(false)\n                } else {\n                    setRejectAllLoading(false)\n                }\n            })\n    }     \n    const sortAlphabetically = (e1, e2, key) => {\n        if(e1[key].toLowerCase() < e2[key].toLowerCase()) { return -1 }\n        if(e1[key].toLowerCase() > e2[key].toLowerCase()) { return 1 }\n        return 0\n    }\n    const sortDate = (e1, e2, key) => {\n        return new Date(e1[key]) - new Date(e2[key])\n    }\n    const getSortComparator = sortKey => {\n        let sortComparator\n        switch (sortKey) {\n            case 'newest':\n                sortComparator = (r1, r2) => {\n                    return sortDate(r2, r1, 'createdAt')\n                }\n                break\n            case 'oldest':\n                sortComparator = (r1, r2) => {\n                    return sortDate(r1, r2, 'createdAt')\n                }\n                break\n            case 'title':\n                sortComparator = (r1, r2) => {\n                    return sortAlphabetically(r1, r2, 'songName')\n                }\n                break\n            case 'artists':\n                sortComparator = (r1, r2) => {\n                    return sortAlphabetically(r1, r2, 'artists')\n                }\n                break\n            case 'votes':\n                sortComparator = (r1, r2) => {\n                    return r2.votes - r1.votes\n                }\n                break\n            default:\n                sortComparator = () => 0\n        }\n        return sortComparator\n    }\n    const sortBy = sortKey => {\n        const sortComparator = getSortComparator(sortKey)\n        const newRequests = formatRequests(requestsRef.current).sort(sortComparator)\n        setRequests(() => [...newRequests])\n    }\n    const showCopyNotification = () => {\n        notification['success']({\n            message: 'Copied Succesfully',\n            description: 'Link copied to clipboard'\n        })\n    }\n    const onAutoAcceptChange = autoAcceptNew => {\n        setAutoAcceptLoading(true)\n        axios.post(`${getURL()}/change-auto-accept`, { autoAccept: autoAcceptNew }, { withCredentials: true })\n            .then(() => {\n                setAutoAccept(autoAcceptNew)\n                if (autoAcceptNew) {\n                    approveRejectAll(true)\n                }\n            })\n            .catch(err => {\n                if (err.response) {\n                    if (err.response.data) {\n                        if (err.response.data.err) {\n                            if (err.response.data.err === 'queue inactive') {\n                                notification['error']({\n                                    message: 'Please open Spotify',\n                                    description: 'Cannot activate auto accept if no player is active'\n                                })\n                            }\n                        }\n                    }\n                }\n                console.log(err)\n            })\n            .finally(() => {\n                setAutoAcceptLoading(false)\n            })\n    }\n    const getDrawerTitle = () => {\n        if (profilePicture === '' || profilePicture === undefined) {\n            return <div>\n                <Avatar icon={<UserOutlined />} />\n                <span className={welcomeText}>{(userName !== '' && userName !== undefined) ? `Welcome, ${userName}!` : `Welcome!`}</span>\n            </div>\n        } else {\n            return <div>\n                <Avatar src={profilePicture} />\n                <span className={welcomeText}>{(userName !== '' && userName !== undefined) ? `Welcome, ${userName}!` : `Welcome!`}</span>\n            </div>\n        }\n    }\n    const getRecommendation = () => {\n        setRecommendLoading(true)\n        axios.get(`${getURL()}/get-recommendation`, { withCredentials: true })\n            .then(response => {\n                const { recommendation } = response.data\n                requests.push(recommendation)\n                setRequests([...requests])\n            })\n            .catch(() => {\n                notification['error']({\n                    message: 'Unable to get recommendation',\n                    description: 'Please try again later'\n                })\n            })\n            .finally(() => {\n                setRecommendLoading(false)\n            })\n    }\n    const changeEmailPreference = preference => {\n        setEmailPreferenceLoading(true)\n        let preferenceString\n        if (preference === 1) {\n            preferenceString = \"none\"\n        } else if (preference === 2) {\n            preferenceString = \"unreadRequests\"\n        } else if (preference === 3) {\n            preferenceString = \"allRequests\"\n        }\n        axios.post(`${getURL()}/change-email-preference`, { emailPreference: preferenceString }, { withCredentials: true })\n            .then(() => {\n                setEmailPreference(preferenceString)\n                setEmailRadioValue(preference)\n            })\n            .catch(() => {\n                notification['error']({\n                    message: 'Could not change email preference',\n                    description: 'Please try again later'\n                })\n            })\n            .finally(() => {\n                setEmailPreferenceLoading(false)\n            })\n    }\n    const columns = [\n        {\n            title: 'Votes',\n            dataIndex: 'votes',\n            key: 'votes',\n            width: '10%',\n            render: votes => (\n                <p>{`${votes}`}</p>\n            )\n        },\n        {\n            title: 'Track',\n            dataIndex: 'track',\n            key: 'track',\n            width: '60%',\n            render: track => (\n                <div>\n                    {track.recommended && <Tag color='purple'>Recommended by SongQ</Tag>}\n                    <List.Item>\n                        <List.Item.Meta \n                            avatar={\n                                <img \n                                    alt='album art' \n                                    src={track.albumArt} \n                                    className={albumArt}\n                            />}\n                            title={track.songName}\n                            description={\n                                <div>\n                                    <p>{track.artists}</p>\n                                    {/* {track.similar && track.similar.difference <= 20 &&\n                                        <p className={similarity}>\n                                            <LikeOutlined />\n                                            {`You may like this based on ${track.similar.name} by ${track.similar.artists} (${Math.round(100 - track.similar.difference)}% similar)`}\n                                        </p>} */}\n                                    {\n                                        track.isSimilar && \n                                        <p className={similarity}>\n                                            <LikeOutlined />\n                                            {`You may like this based on ${track.similar[0].name} by ${track.similar[0].artists}`}\n                                        </p>\n                                    }\n                                </div>\n                            }\n                        />\n                    </List.Item>\n                </div>\n            ),\n        },\n        {\n            title: 'Accept Or Reject',\n            dataIndex: 'approveOrReject',\n            key: 'approveOrReject',\n            width: '30%',\n            render: requestId => (\n                <div style={{ 'display': 'flex' }}>\n                    <Button \n                        className={approveButton} \n                        onClick={() => approveReject(requestId, true)}\n                        id={`${requestId}_approve`}\n                        loading={loading.includes(`${requestId}_approve`)}\n                        icon={<CheckOutlined />}\n                    />\n                    <Button \n                        className={rejectButton}\n                        danger \n                        onClick={() => approveReject(requestId, false)}\n                        id={`${requestId}_reject`}\n                        loading={loading.includes(`${requestId}_reject`)}\n                        icon={<CloseOutlined />}\n                    />\n                </div>\n            )\n        }\n    ]\n    const menu = (\n        <Menu>\n            <Menu.Item onClick={() => setSortKey('oldest')}>\n                Oldest\n            </Menu.Item>\n            <Menu.Item onClick={() => setSortKey('newest')}>\n                Newest\n            </Menu.Item>\n            <Menu.Item onClick={() => setSortKey('title')}>\n                Title\n            </Menu.Item>\n            <Menu.Item onClick={() => setSortKey('artists')}>\n                Artists\n            </Menu.Item>\n            <Menu.Item onClick={() => setSortKey('votes')}>\n                Votes\n            </Menu.Item>\n        </Menu>\n    )\n    const tourSteps = [\n        {\n            index: 0,\n            title: 'Queue Link',\n            content: <div>\n                <p>Use the 'Copy Link' button to get a shareable link for people to request tracks to your queue.</p>\n                <Button onClick={() => setTourVisible(false)}>Skip Tour</Button>\n                <Button type='primary' onClick={() => nextTourStep()}>Next</Button>\n            </div>\n        },\n        {\n            index: 1,\n            title: 'Requests',\n            content: <div>\n                <p>Your requests are here. You can accept or reject them, see details about the track and votes garnered.</p>\n                <p>On approval, the track will be added to your Spotify queue.</p>\n                <Button onClick={() => setTourVisible(false)}>Skip Tour</Button>\n                <Button onClick={() => previousTourStep()}>Previous</Button>\n                <Button type='primary' onClick={() => nextTourStep()}>Next</Button>\n            </div>\n        },\n        {\n            index: 2,\n            title: 'Extra Actions',\n            content: <div>\n                <p>Use this menu to enable Auto Accept for all current and future requests.</p>\n                <p>You can use the 'Accept All' and 'Reject All' buttons to clear your current requests.</p>\n                <p>Can't think of what to play? We can recommend you something based on what you've approved.</p>\n                <Button onClick={() => previousTourStep()}>Previous</Button>\n                <Button type='primary' onClick={() => nextTourStep()}>Finish</Button>\n            </div>\n        }\n    ]\n    return (\n        <div>\n            <Spin spinning={pageLoading} indicator={<LoadingOutlined spin />}>\n                <Popover placement='rightBottom' visible={currTourStep === 2 && tourVisible} title={tourSteps[2].title} content={tourSteps[2].content}>\n                    <Drawer \n                        visible={menuVisible}\n                        title={ getDrawerTitle()}\n                        onClose={() => setMenuVisible(false)}\n                        footer={\n                        <div>\n                            <Button \n                                ghost \n                                type='primary'\n                                shape='round' \n                                style={{ marginLeft: '14px'}}\n                                onClick={() => setTourVisible(true)}\n                            >\n                                Show Me Around\n                            </Button>\n                        </div>\n                        }\n                    >\n                        <div className={menuItem}>\n                            Auto Accept:\n                            <Switch\n                                checked={autoAccept}\n                                onChange={onAutoAcceptChange}\n                                style={{ marginLeft: '5px', marginRight: '5px'}}\n                                loading={autoAcceptLoading}\n                            />\n                        </div>\n                        <div className={menuItem}>\n                            <Button\n                                className={autoAccept ? approveButtonCurved : approveButton} \n                                onClick={() => approveRejectAll(true)}\n                                loading={approveAllLoading}\n                                style={isMobile ? { padding :'4px 10px'} : {}}\n                                disabled={autoAccept}\n                            >\n                                Accept All\n                            </Button>\n                        </div>\n                        <div className={menuItem}>\n                            <Button \n                                className={rejectButton}\n                                danger \n                                onClick={() => approveRejectAll(false)}\n                                loading={rejectAllLoading}\n                                style={isMobile ? { padding :'4px 10px' } : {}}\n                                disabled={autoAccept}\n                            >\n                                Reject All\n                            </Button>\n                        </div>\n                        <div className={menuItem}>\n                            <Button\n                                onClick={() => getRecommendation()}\n                                className={recommendButton}\n                                type='primary'\n                                ghost\n                                loading={recommendLoading}\n                            >\n                                Recommend Something\n                            </Button>\n                        </div>\n                        <div className={menuItem}>\n                            {emailPreferenceLoading && <LoadingOutlined spin />} Email Notification Preferences\n                            <Radio.Group \n                                onChange={e => changeEmailPreference(e.target.value)} \n                                value={emailRadioValue}\n                            >\n                                <Radio value={1}>\n                                    No Emails\n                                </Radio>\n                                <Radio value={2}>\n                                    Unread Requests Only\n                                </Radio>\n                                <Radio value={3}>\n                                    All Requests\n                                </Radio>\n                            </Radio.Group>\n                        </div>\n                    </Drawer>\n                </Popover>\n                <PageHeader\n                    title={\n                    <div className={welcomeContainer}>\n                        <img className={logo} src={logoUrl} style={isMobile ? { width: '40%'} : {}}/>\n                    </div>}\n                    className={header}\n                    extra={[\n                        <div>\n                            <div>\n                                <Popover visible={currTourStep === 0 && tourVisible} placement={isMobile ? 'bottom' : 'left'} content={tourSteps[0].content} title={tourSteps[0].title}>\n                                    <CopyToClipboard \n                                        text={`${currUrl}/queue/${userId}`}\n                                        onCopy={() => showCopyNotification()}\n                                    >\n                                        <Button shape='round' ghost>Copy Link</Button>\n                                    </CopyToClipboard>\n                                </Popover>\n                                <Button \n                                    onClick={() => setShowQRCodeModal(true)}\n                                    shape='round' \n                                    ghost\n                                    style={{ marginLeft: '0.5rem'}}\n                                >\n                                    Show QR Code\n                                </Button>\n                                <Button \n                                    ghost \n                                    icon={<MenuOutlined />} \n                                    style={isMobile ? { border: 'none', position: 'fixed', top: '0.5rem', right: '0.5rem'} : {border: 'none'}} \n                                    onClick={() => setMenuVisible(!menuVisible)} \n                                />\n                            </div>\n                            {turnOnCodeFeatureEnabled ? <p className={queueActivatedText}>{`Code: ${code}`}</p> : ''}\n                        </div>,\n                    ]}\n                />\n                <div>\n                    <Dropdown overlay={menu} trigger={'click'} onVisibleChange={visible => setDropdownVisible(visible)}>\n                        <span className={sortByText}>Sort by {dropdownVisible ? <UpOutlined /> : <DownOutlined />}</span>\n                    </Dropdown>\n                </div>\n                <Popover visible={currTourStep === 1 && tourVisible} content={tourSteps[1].content} title={tourSteps[1].title}>\n                    <Table \n                        columns={columns} \n                        dataSource={generateData()} \n                        className={requestsTable}\n                        locale={{ emptyText: 'No Requests'}}/>\n                </Popover>\n            </Spin>\n            <Modal\n                title={`${userName}'s Queue`}\n                visible={showQRCodeModal}\n                footer={null}\n                onCancel={() => setShowQRCodeModal(false)}\n            >\n                <div className={qrCodeContainer}>\n                    <QRCode value={`${currUrl}/queue/${userId}`} />\n                </div>\n            </Modal>\n            <FeedbackModal feedbackVisible={feedbackVisible} hideFeedback={() => setFeedbackVisible(false)}/>\n            <FooterComponent transparentBackground showFeedback={() => setFeedbackVisible(true)}/>\n        </div>\n    )\n}\n\nexport default Home\n","/Users/gautamjethwani/Documents/SongQ/songq-ui/src/GuestHome/GuestHome.js",["68","69"],"/Users/gautamjethwani/Documents/SongQ/songq-ui/src/util.js",[],"/Users/gautamjethwani/Documents/SongQ/songq-ui/src/FooterComponent/FooterComponent.js",["70"],"import { Layout } from 'antd'\nimport { \n    footer,\n    footerElem,\n    footerMobile\n} from './Footer.module.css'\nimport { isMobile } from 'react-device-detect'\n\nconst { Footer } = Layout\n\nconst FooterComponent = props => {\n    const footerStyle = props.transparentBackground ? { background: 'none' } : {}\n    const aStyle = props.transparentBackground ? { color: 'black' } : {}\n    return(\n        <Footer className={isMobile ? footerMobile : footer} style={footerStyle}>\n            <a \n                href='/terms-and-conditions.html' \n                target='_blank' \n                className={footerElem} \n                style={{ \n                    marginLeft: '1rem',\n                    ...aStyle\n                }}\n            >\n                Terms and Conditions\n            </a>\n            <a \n                href='/privacy-policy.html' \n                target='_blank' \n                className={footerElem}\n                style={{ \n                    marginLeft: '1rem',\n                    ...aStyle\n                }}\n            >\n                Privacy Policy\n            </a>\n            <a\n                onClick={() => props.showFeedback()}\n                className={footerElem}\n                style={aStyle}\n            >\n                Feedback\n            </a>\n        </Footer>\n    )\n}\n\nexport default FooterComponent","/Users/gautamjethwani/Documents/SongQ/songq-ui/src/FooterComponent/index.js",[],"/Users/gautamjethwani/Documents/SongQ/songq-ui/src/FeedbackModal/index.js",[],"/Users/gautamjethwani/Documents/SongQ/songq-ui/src/FeedbackModal/FeedbackModal.js",[],"/Users/gautamjethwani/Documents/SongQ/songq-ui/src/FeedbackPage/index.js",[],"/Users/gautamjethwani/Documents/SongQ/songq-ui/src/FeedbackPage/FeedbackPage.js",[],{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":80,"column":12,"nodeType":"77","messageId":"78","endLine":80,"endColumn":27},{"ruleId":"79","severity":1,"message":"80","line":193,"column":8,"nodeType":"81","endLine":193,"endColumn":23,"suggestions":"82"},{"ruleId":"79","severity":1,"message":"83","line":206,"column":9,"nodeType":"81","endLine":206,"endColumn":36,"suggestions":"84"},{"ruleId":"79","severity":1,"message":"85","line":210,"column":8,"nodeType":"81","endLine":210,"endColumn":17,"suggestions":"86"},{"ruleId":"87","severity":1,"message":"88","line":705,"column":25,"nodeType":"89","endLine":705,"endColumn":102},{"ruleId":"79","severity":1,"message":"90","line":84,"column":8,"nodeType":"81","endLine":84,"endColumn":10,"suggestions":"91"},{"ruleId":"87","severity":1,"message":"88","line":217,"column":21,"nodeType":"89","endLine":217,"endColumn":98},{"ruleId":"92","severity":1,"message":"93","line":38,"column":13,"nodeType":"89","endLine":42,"endColumn":14},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"no-unused-vars","'emailPreference' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'approveRejectAll', 'autoAccept', 'cookies', 'getSortComparator', and 'setCookie'. Either include them or remove the dependency array.","ArrayExpression",["96"],"React Hook useEffect has a missing dependency: 'menuVisible'. Either include it or remove the dependency array.",["97"],"React Hook useEffect has a missing dependency: 'sortBy'. Either include it or remove the dependency array.",["98"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'userId'. Either include it or remove the dependency array.",["99"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation",{"desc":"100","fix":"101"},{"desc":"102","fix":"103"},{"desc":"104","fix":"105"},{"desc":"106","fix":"107"},"Update the dependencies array to be: [approveRejectAll, autoAccept, cookies, getSortComparator, initialRender, setCookie]",{"range":"108","text":"109"},"Update the dependencies array to be: [currTourStep, menuVisible, tourVisible]",{"range":"110","text":"111"},"Update the dependencies array to be: [sortBy, sortKey]",{"range":"112","text":"113"},"Update the dependencies array to be: [userId]",{"range":"114","text":"115"},[7521,7536],"[approveRejectAll, autoAccept, cookies, getSortComparator, initialRender, setCookie]",[7895,7922],"[currTourStep, menuVisible, tourVisible]",[8015,8024],"[sortBy, sortKey]",[2903,2905],"[userId]"]